

package tc.p410_DI_1;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import static org.junit.Assert.*;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class AddElectricalWiresSysTest {

  AddElectricalWires solver; 

  @Before
  public void setUp() {
    solver = new AddElectricalWires();
  }

  

  @Test
  public void test0(){
    assertEquals(3, solver.maxNewWires(new String[]{"000", "000", "000"},new int[]{0}) );
  }



  @Test
  public void test1(){
    assertEquals(1, solver.maxNewWires(new String[]{"000", "000", "000"},new int[]{0, 1}) );
  }



  @Test
  public void test2(){
    assertEquals(0, solver.maxNewWires(new String[]{"01", "10"},new int[]{0}) );
  }



  @Test
  public void test3(){
    assertEquals(0, solver.maxNewWires(new String[]{"00000", "00000", "00000", "00000", "00000"},new int[]{0, 1, 2, 3, 4}) );
  }



  @Test
  public void test4(){
    assertEquals(3, solver.maxNewWires(new String[]{"01000", "10100", "01010", "00100", "00000"},new int[]{2, 4}) );
  }



  @Test
  public void test5(){
    assertEquals(1225, solver.maxNewWires(new String[]{},new int[]{49}) );
  }



  @Test
  public void test6(){
    assertEquals(0, solver.maxNewWires(new String[]{},new int[]{4, 28, 11, 15, 24, 35, 17, 36, 26, 48, 33, 39, 19, 2, 47, 49, 25, 18, 32, 40, 5, 21, 7, 12, 14, 42, 27, 6, 45, 44, 30, 38, 13, 37, 3, 16, 29, 43, 9, 22, 8, 23, 20, 34, 1, 10, 31, 0, 46, 41}) );
  }



  @Test
  public void test7(){
    assertEquals(0, solver.maxNewWires(new String[]{},new int[]{28}) );
  }



  @Test
  public void test8(){
    assertEquals(150, solver.maxNewWires(new String[]{},new int[]{43, 35, 25, 49, 29, 38, 13, 42, 10, 3}) );
  }



  @Test
  public void test9(){
    assertEquals(207, solver.maxNewWires(new String[]{"00001000000000001000000000000011000000000000100000", "00000000000000000000000000010000000000000000000000", "00000000000100000000000000000000010000010000000000", "00000000000000000000000000000000000000000000010000", "10000000000000001000000000000010100000000000000000", "00000000000000000000100000000100000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000001000000000000001000000000000", "00000000000000000000000010000000000000000000000000", "00000000000000000000000000010000000000000000000000", "00100000000000000000000000000000010000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "10001000000000000000000000000010000000000000000000", "00000000000000000000100000000100000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000001000000000000000100000000000", "00000100000000000100000000001000000000000000000000", "00000000000000000000000000000000010000000000000000", "00000000100000000001000000000000000100000100000000", "00000000000000000000000000000000000000000000000000", "00000000010000000000000000100000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000010000000000000000000000000", "01000000001000000000000000000000000000000010000000", "00000000000000000000100000000000000000000000000000", "00000100000000000100000000000000000000000000000000", "10001000000000001000000000000001100000000000000000", "10000000000000000000000000000010100000000000100000", "00001000000000000000000000000011000000000000000000", "00100000000100000000010000000000000000001000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000001000000000000000000000000010", "00000000000000000000000000000000000000000000000000", "00000000100000000000000000000000000000100000000000", "00000000000000000001000000000000000001000000000010", "00100000000000000000000000000000000000000000000000", "00000000000000000000000000000000010000000000000000", "00000000000000000000001000000000000000000000000000", "00000000000000000000000000010000000000000000000000", "00000000000000000000000000000000000000000000000000", "10000000000000000000000000000001000000000000000000", "00010000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000100100000000000", "00000000000000000000000000000000000000000000000000"},new int[]{4, 29, 49, 19, 47, 46, 45, 39, 26, 1}) );
  }



  @Test
  public void test10(){
    assertEquals(467, solver.maxNewWires(new String[]{},new int[]{43, 31, 37, 34, 41, 33, 47, 10, 28, 19}) );
  }



  @Test
  public void test11(){
    assertEquals(292, solver.maxNewWires(new String[]{},new int[]{37, 22, 3, 31, 38, 9, 29, 18}) );
  }



  @Test
  public void test12(){
    assertEquals(262, solver.maxNewWires(new String[]{},new int[]{9, 1, 8, 29, 19, 35, 41, 45}) );
  }



  @Test
  public void test13(){
    assertEquals(334, solver.maxNewWires(new String[]{},new int[]{11, 16, 28, 4, 7, 24, 33, 41}) );
  }



  @Test
  public void test14(){
    assertEquals(410, solver.maxNewWires(new String[]{},new int[]{34, 42, 6, 18, 3, 25, 15, 36}) );
  }



  @Test
  public void test15(){
    assertEquals(1060, solver.maxNewWires(new String[]{},new int[]{11, 14}) );
  }



  @Test
  public void test16(){
    assertEquals(568, solver.maxNewWires(new String[]{},new int[]{43, 45}) );
  }



  @Test
  public void test17(){
    assertEquals(495, solver.maxNewWires(new String[]{},new int[]{31, 10, 8, 45}) );
  }



  @Test
  public void test18(){
    assertEquals(493, solver.maxNewWires(new String[]{},new int[]{31, 13, 20, 46, 39, 45}) );
  }



  @Test
  public void test19(){
    assertEquals(528, solver.maxNewWires(new String[]{"00000000000101000000001000000000000000000", "00000001000000000011000000000000000000000", "00000001000000010001111000000000000000000", "00000000001000000100010000010000000000010", "00000000001000010010000000001000000000000", "00000000000100110000000010000000001000000", "00000000000000000000110000001000000000000", "01100000000010000000000010010000000100100", "00000000000000000100010000010000000000000", "00000000000000001000000000000001000000001", "00011000000000000000000000101010000000000", "10000100000001100000000000100000000000000", "00000001000000000000000001000100000000000", "10000000000100000000010000110100000000000", "00000100000100000101000000000000001100000", "00101100000000000000000000010100000000000", "00000000010000000000000000000000100010000", "00010000100000100000000000000000000000010", "01001000000000000000000010010000010000000", "01100000000000100000000101000000001001010", "00100010000000000000000010010010000000000", "00110010100001000000000000000000000001000", "10100000000000000000000100000000000001000", "00000000000000000001001001001000000000000", "00000101000000000010100000000000000000000", "00000000000010000001000100000000000000100", "00000000001101000000000000000000000000000", "00010001100001010010100000000000000000000", "00001010001000000000000100000000011000000", "00000000000011010000000000000000000000000", "00000000001000000000100000000000000000000", "00000000010000000000000000000000100000000", "00000000000000001000000000000001000000000", "00000000000000000010000000001000000000000", "00000100000000100001000000001000000100000", "00000001000000100000000000000000001000000", "00000000000000001000000000000000000000000", "00000000000000000001011000000000000000000", "00000001000000000000000001000000000000000", "00010000000000000101000000000000000000000", "00000000010000000000000000000000000000000"},new int[]{7, 31}) );
  }



  @Test
  public void test20(){
    assertEquals(670, solver.maxNewWires(new String[]{"01001100000001001000100100110000000000010", "10100010100010000000000000100100101100000", "01000000000000000000000001000000000000000", "00000010000101010100000000000000000000000", "10000000000010001000010010000000000000010", "10000000000000000000000000010000000001000", "01010000000000010000000000010000010000000", "00000000010000010000000001000000001000010", "01000000000000000001000010000000100010110", "00000001001010100010010000010000011010000", "00000000010100000010000100110010000000010", "00010000001000001000001000000000011100100", "01001000010000010000110010001000111000001", "10010000000000001100000000000000000000000", "00000000010000001000000010000000000000100", "00010011000010000000001101000001010001000", "10001000000101100000010000000000000001000", "00010000000001000000010000010000000000010", "00000000011000000001001000100000000010101", "00000000100000000010001000011000000100000", "10000000000010000000000010100001000000000", "00001000010010001100000000000000100001011", "00000000000100010011000000000100001000000", "10000000001000010000000000000100110010001", "00001000100010100000100000000000010000000", "00100001000000010000000000011100001110000", "11000000001000000010100000000010000001011", "10000110011000000101000001000010001101111", "00000000000010000001000001000000101000101", "01000000000000000000001101000000000000000", "00000000001000000000000000110000010000000", "00000000000000010000100000000000000001100", "01000000100010000000010100001000000000010", "00000010010110010000000110000010000100011", "01000001010110000000001001011000000100000", "01000000000100000001000001010000011010000", "00000000110000000010000101000000000100100", "00000100000000011000010000110001000000000", "00000000100100100010000000011001000010010", "10001001101000000100010000110000110000100", "00000000000010000010010100111000010000000"},new int[]{40}) );
  }



  @Test
  public void test21(){
    assertEquals(322, solver.maxNewWires(new String[]{},new int[]{41, 43, 18, 16, 0, 42, 37, 45}) );
  }



  @Test
  public void test22(){
    assertEquals(113, solver.maxNewWires(new String[]{"000000000100000000000000000000000001000000000", "001010000000100000000000000000000000100000000", "010000000000000000000000000000000000000000000", "000000000000000000010000000000000000000000000", "010000000000100000000000000000000000100000000", "000000000001000000000000000000010001000000000", "000000000000000000000000000100000000000000000", "000000000000000000000000000000000000000000100", "000000000000010000000000000000000010000000000", "100000000000000000000000000000010000000001000", "000000000000000000000000000000000000010000000", "000001000000000000000000000000000000000000000", "010010000000000000000000000000000000000000000", "000000001000000000000001001000100010000000000", "000000000000000000000000100000000000000000000", "000000000000000000000000000000000000000000000", "000000000000000000000001000001000000000000000", "000000000000000000000000010001100000000000000", "000000000000000000000000000000000001000000000", "000100000000000000000100000000001000000000000", "000000000000000000000000000100000000001000001", "000000000000000000010000100010000000000000000", "000000000000000000000000000100000000011000011", "000000000000010010000000010000000000000000000", "000000000000001000000100000010000000000000000", "000000000000000001000001001000000000000110000", "000000000000010000000000010001000000000000000", "000000100000000000001010000000000000000000001", "000000000000000000000100100000001000000000000", "000000000000000011000000001000000000000000000", "000000000000010001000000000000000010000110000", "000001000100000000000000000000000001000000000", "000000000000000000010000000010000000000000000", "000000000000000000000000000000000000010000010", "000000001000010000000000000000100000000010000", "100001000000000000100000000000010000000000000", "010010000000000000000000000000000000000000000", "000000000010000000000010000000000100000000000", "000000000000000000001010000000000000000000001", "000000000000000000000000010000100000000000000", "000000000000000000000000010000100010000000000", "000000000100000000000000000000000000000000000", "000000010000000000000000000000000000000000000", "000000000000000000000010000000000100000000000", "000000000000000000001010000100000000001000000"},new int[]{43, 12, 35, 30, 15, 42, 14}) );
  }



  @Test
  public void test23(){
    assertEquals(553, solver.maxNewWires(new String[]{},new int[]{22, 10, 21}) );
  }



  @Test
  public void test24(){
    assertEquals(228, solver.maxNewWires(new String[]{},new int[]{24, 1, 13, 39, 31}) );
  }



  @Test
  public void test25(){
    assertEquals(457, solver.maxNewWires(new String[]{"010011010001101000101010001010010000001110", "101010010101100001100011001100100000011011", "010001000010000100100000100101000000000010", "000000000000000000000000000000000010100000", "110000001101000000001001110010001000000100", "101000000100000110010101100101111100000100", "000000000000000011101001110000000100000011", "110000000100001001110000000011000100000000", "000010000010000000010110010011110000000010", "010011010010001010101000100010010000001000", "001000001101010110000000001100000000001001", "110010000010001110000010100010010000011000", "110000000000000110001010010000001000000001", "000000000010000100000011010101001000010111", "100000010101000111000000010011010000001110", "001001000011111000000100101000011100011001", "000001100111101000111100110110001000000100", "010000110000001000011100100100001100001000", "111000110100000010001011001001000100010101", "000001011000000011000000001001011000000100", "100010100100100011100000100110010000001010", "000001001000000111000001001100101000001101", "110000001001110000100001110001001100010010", "010011100000010000100110011000010000000100", "001011100101000111001010010000100000000001", "000010101000111010000011100000001100000100", "110000000010000100110101000010110100000111", "011001000010010011001100000000000000001100", "100010011101001010001000001000101100000011", "001001011000011000110010000000101100000000", "010001001000000000000100101011000000000101", "100001001101001100011001001000001000000001", "000011000000110111010110010011010000000100", "000001110000000101100010011011000000001101", "000100000000000000000000000000000001100000", "000000000000000000000000000000000010000000", "000100000000000000000000000000000010000000", "010000000001010100100010000000000000000010", "110000000111001101001100000100000100000010", "100011000000011010110101011100101100000010", "111000101000011000001010001010000000011100", "010000100010110100100100101010110100000000"},new int[]{30, 3}) );
  }



  @Test
  public void test26(){
    assertEquals(51, solver.maxNewWires(new String[]{"0000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000", "0000000000000000000000000000000010000000001", "0000010000100001000001000000000000010010000", "0000000000000100000000000000011000001000000", "0001000000000001000101000010000000010010000", "0000000000001000000000000000000000000000000", "0000000000000000000000100000000000000000000", "0000000000000000000000000000000000000000000", "0000000000010000000000000100000000000000000", "0001000000000001000000000010000000010000000", "0000000001000000000000000100000100000000000", "0000001000000000000000000000000000000000000", "0000100000000000000000000000010001001000000", "0000000000000000010000000001000000000000000", "0001010000100000000100000010000000010010000", "0000000000000000001000000000000000000000100", "0000000000000010000000100000000000000000000", "0000000000000000100000000000000000000101010", "0000010000000001000000010010000000000010000", "0000000000000000000000000000100000000000001", "0001010000000000000000000010000000010000000", "0000000100000000010000000001000000000000000", "0000000000000000000100000010000000000000000", "0000000000000000000000000100000000100000000", "0000000001010000000000001000000000100000000", "0000010000100001000101010000000000000010000", "0000000000000010000000100000000000000000000", "0000000000000000000010000000000010000000000", "0000100000000100000000000000001000000000000", "0000100000000000000000000000010001000000000", "0000000000010000000000000000000000000000000", "0010000000000000000000000000100000000000000", "0000000000000100000000000000001000000000000", "0000000000000000000000001100000000000000000", "0001010000100001000001000000000000000000000", "0000100000000100000000000000000000000000000", "0000000000000000001000000000000000000000000", "0001010000000001000100000010000000000000000", "0000000000000000001000000000000000000000100", "0000000000000000100000000000000000000001010", "0000000000000000001000000000000000000000100", "0010000000000000000010000000000000000000000"},new int[]{0, 29, 1, 18, 15, 20, 24, 6, 8, 7}) );
  }



  @Test
  public void test27(){
    assertEquals(439, solver.maxNewWires(new String[]{},new int[]{32, 39, 11, 16, 28, 22}) );
  }



  @Test
  public void test28(){
    assertEquals(483, solver.maxNewWires(new String[]{},new int[]{39, 8}) );
  }



  @Test
  public void test29(){
    assertEquals(508, solver.maxNewWires(new String[]{},new int[]{3, 6, 48}) );
  }



  @Test
  public void test30(){
    assertEquals(33, solver.maxNewWires(new String[]{"000000000000000000000000000000000000001000", "000000000000100101000000000110010010000000", "000000000000000000001000101000000000000000", "000010000000010000010000010000000000000000", "000100000010010000100000010000000000100000", "000000000000000000000000000000000000000010", "000000000000000010000000000000000001010001", "000000000000000000000100100000000000000000", "000000000000000000000010000000101000000000", "000000000000100100000000000110000000000000", "000010000000010000110000010000000000000000", "000000000000001010000000000000000001010000", "010000000100000100000000000110010010000000", "000110000010000000110000010000000000100000", "000000000001000000000000000000000001010000", "010000000100100000000000000000010000000000", "000000100001000000000000000000000000000001", "010000000000000000000000000100010000000000", "000010000010010000010000000000000000000000", "000100000010010000100000010000000000100000", "001000000000000000000100001000000000000000", "000000010000000000001000101000000000000000", "000000001000000000000000000000101000000000", "000000000000000000000000000001000000000000", "001000010000000000000100001000000000000000", "000110000010010000010000000000000000100000", "001000000000000000001100100000000000000000", "010000000100100001000000000010000010000000", "010000000100100000000000000100010010000000", "000000000000000000000001000000000000000000", "000000001000000000000010000000000000000000", "010000000000100101000000000010000010000000", "000000001000000000000010000000000000000000", "000000000000000000000000000000000000000000", "010000000000100000000000000110010000000000", "000000100001001000000000000000000000010001", "000010000000010000010000010000000000000000", "000000100001001000000000000000000001000001", "100000000000000000000000000000000000000100", "000000000000000000000000000000000000001000", "000001000000000000000000000000000000000000", "000000100000000010000000000000000001010000"},new int[]{41, 29, 39, 5, 33, 22, 27, 19, 7}) );
  }



  @Test
  public void test31(){
    assertEquals(510, solver.maxNewWires(new String[]{"000010001110100000011010000001001111000010011", "000000000000000000000000000000000000000000000", "000100110110110010001111011100000000011001110", "001011010100000110100100001011111100001011100", "100100001001110100001111011101100100111100010", "000100010000011000011110010010000001011011011", "001000001010100100011111001111110011010101110", "001101001111001110001110111111000101111101010", "100010110100011100100100101101111011010000001", "101100011010010011010101111010000000011000000", "101000110100000001110011100101111111100000111", "000010010000000001111010010010001000110100101", "101010100000001011000110100110111001010001100", "001011001100000000101010101100001100100011100", "000001011000100101000110111100101000100110010", "000110111000001000001001110011000110010111110", "001100010100100000010110000001101111111100110", "000000000111101000100011000000110100000011000", "000100001011010001010000110000100101010010100", "100001100111000010100101100010001110111100100", "101011110001010100000100010000101001110110000", "001111111100101010011011010110111001000010100", "101011110011111011000100001011110011111100111", "001010100110000101010100111000010010101000000", "000000011110111100110001010100001000101000100", "001011010101001100101101100100000111000110111", "001110111100011000000011000100001101110110101", "001010111010111000000100111001010001001000010", "000101110101100100010110000001100110001111111", "100110111010000110000010000110000001110010001", "000110101010101011101110000010001100010110001", "000100101010100001000111000100000010000011101", "100100001011111010011100101000100000010100111", "100110010010010111110000011010100010111010001", "100000101010000110010011010010010101101011111", "100001111010100010101110011101000010000010000", "000010010011011010011011101001000110000011110", "001011111101100110111010001001101100000011111", "001111010100000010010011100110000110000010011", "000010110001001110011010011010101000000001011", "100101000000011101101100011011110111111001100", "001101110000110101000000000010010010110110110", "001100100011110110110110111010011010110011010", "101011110010001110000010010110001010111101101", "100001001011000000000010011011111110011100010"},new int[]{1, 4}) );
  }



  @Test
  public void test32(){
    assertEquals(687, solver.maxNewWires(new String[]{},new int[]{19}) );
  }



  @Test
  public void test33(){
    assertEquals(327, solver.maxNewWires(new String[]{"000101101111111000010101001001001100101000", "000001111110001100010011010001010101101100", "000001110111111010000011000111010101100110", "100000101101001001010101011110011100111001", "000001001010000100000011011111011101110111", "111010110100111011010111001010110101000111", "111101000111110001010000010101001100100101", "011001000000010011010000011011100100111001", "110110000000001111000111010111001101011110", "111101100010001101000101000001011001110011", "111010100100110000010000001000111001010010", "101100100000001101010101000101011101001111", "101001100010011111010101010001111101101000", "101001110010101100010100000101100000001111", "111101001101110111000001000100011101010011", "010010001101111000000111011110110100100100", "001001011000101001010111000110000101011110", "000101111101101010010110011100101101101000", "000000000000000000001000100000000010000000", "110101110011110011000001010110111101111110", "000000000000000000100000000000000010000000", "100101001101110111000001010101000000110101", "011011001000000111000000010000111000100001", "111111001101101110010100001000010000100100", "000000000000000000100000000000000010000000", "010110111000100101010110001100010001101111", "100111010010000101000001010110010000010101", "001110101001011111010100011011010100110100", "001111011000000110010000001101001001001111", "111010111101110000000100000110000001000100", "000001010010110101010010000000000101110011", "011111000111101100010011011100000101000101", "100110101111101001010010000010000101100010", "111111111001101111010000000100111001100010", "000000000000000000101000100000000000000000", "011011001111101011010000010011111100011100", "111110110100100101010111010100101100001111", "000110011110001010010100001100100001000101", "110100011001110011010000010010000001100111", "011011101001010110010101011111010001111000", "001011001111011010010000010010101100101001", "000111110101011000000110011010110000111010"},new int[]{18, 16}) );
  }



  @Test
  public void test34(){
    assertEquals(82, solver.maxNewWires(new String[]{},new int[]{27, 19, 6, 7, 4, 32, 29}) );
  }



  @Test
  public void test35(){
    assertEquals(88, solver.maxNewWires(new String[]{"00100100000000010000001100000000000001000", "00100000000000000000001100010000000001000", "11000100000000010000001100000000000001000", "00000000001000000000010000000000100000001", "00000011000010001110000000001110011000000", "10100000000000010000001000010000000001000", "00001001000110101110000000000110010000010", "00001010100010101001000000100010010000100", "00000001000110100000100000100100001000110", "00000000000000000000000010000000000000000", "00010000000000000000010000000001100010001", "00000010100001001000100000101110001000010", "00001011100000001111100000001010010000110", "00000000000100100010100000101100000000100", "00000011100001001011100000101110001000110", "10100100000000000000001000010000000001000", "00001011000110100110000000000010011000110", "00001010000010001011100000001000011000000", "00001010000011101101000000101100011000110", "00000001000010100110100000101110011000110", "00000000100111100101000000101000001000100", "00010000001000000000000000000001100010001", "11100100000000010000000100000000000001000", "11100000000000000000001000010000000001000", "00000000010000000000000000000000000000000", "00000000000000000000000000000000000100000", "00000001100101100011100000000010001000110", "01000100000000010000000100000000000001000", "00001000000111100111100000000110011000110", "00001010100101100011000000001010001000010", "00001011000110101001000000101100011000110", "00000000001000000000010000000000100010001", "00010000001000000000010000000001000010001", "00001011000010001111000000001010000000110", "00001000100100101111100000101110000000110", "00000000000000000000000001000000000000000", "00000000001000000000010000000001100000000", "11100100000000010000001100010000000000000", "00000001100011101011100000101010011000010", "00000010100110101011000000101110011000100", "00010000001000000000010000000001100000000"},new int[]{40, 14, 25, 24, 5}) );
  }



  @Test
  public void test36(){
    assertEquals(57, solver.maxNewWires(new String[]{"000000010000000100000000001000100000000000", "000000000000000000000001100000000000000000", "000000000000000000000000100000000000000000", "000000000000000000000000000100010000000000", "000000100000001010000000000000000001000000", "000000000000000000000000000000000000000000", "000010000000001010000000000000000001000100", "100000000000000100000000000000000000000000", "000000000001010000111010000010000000001010", "000000000000000000000000000000000000000000", "000000000001010000011010000000000100001000", "000000001010010000111010010010000000000010", "000000000000000001000000000001000000000001", "000000001011000000001000000000000100001000", "000010100000000010000000000000000000000000", "100000010000000000000100001000001000100000", "000010100000001000000000000000000001000100", "000000000000100000000000000001000010000000", "000000001001000000000010000010000100001000", "000000001011000000001010010000000100000000", "000000001011010000010010010010000000001010", "000000000000000100000000000000101000000000", "000000001011000000111000000010000100001000", "010000000000000000000000000000000000010000", "011000000000000000000000000000000000000000", "000000000001000000011000000010000000000010", "100000000000000100000000000000101000000000", "000100000000000000000000000000010000000000", "000000001001000000101010010000000100001000", "000000000000100001000000000000000000000001", "100000000000000000000100001000001000000000", "000100000000000000000000000100000000000000", "000000000000000100000100001000100000000000", "000000000010010000110010000010000000000000", "000000000000000001000000000000000000000001", "000010100000000010000000000000000000000000", "000000000000000100000000000000000000000000", "000000000000000000000001000000000000000000", "000000001010010000101010000010000000000010", "000000100000000010000000000000000000000000", "000000001001000000001000010000000000001000", "000000000000100000000000000001000010000000"},new int[]{0, 9, 34, 27, 4, 10, 5, 1}) );
  }



  @Test
  public void test37(){
    assertEquals(0, solver.maxNewWires(new String[]{"0"},new int[]{0}) );
  }



  @Test
  public void test38(){
    assertEquals(3, solver.maxNewWires(new String[]{"000", "000", "000"},new int[]{0}) );
  }



  @Test
  public void test39(){
    assertEquals(3, solver.maxNewWires(new String[]{"01000", "10100", "01010", "00100", "00000"},new int[]{2, 4}) );
  }



  @Test
  public void test40(){
    assertEquals(22, solver.maxNewWires(new String[]{"00000001000", "00000110000", "00010000000", "00100000000", "00000000000", "01000010000", "01000100000", "10000000100", "00000001001", "00000000000", "00000000100"},new int[]{2, 4, 7}) );
  }



  @Test
  public void test41(){
    assertEquals(943, solver.maxNewWires(new String[]{},new int[]{0, 10, 20, 30, 48}) );
  }



  @Test
  public void test42(){
    assertEquals(779, solver.maxNewWires(new String[]{},new int[]{0, 2, 4, 6, 16}) );
  }



  @Test
  public void test43(){
    assertEquals(8, solver.maxNewWires(new String[]{"0100000", "1000000", "0000000", "0000100", "0001010", "0000100", "0000000"},new int[]{0, 4}) );
  }



  @Test
  public void test44(){
    assertEquals(17, solver.maxNewWires(new String[]{"000100000", "000000010", "000010000", "100001000", "001000000", "000100000", "000000010", "010000100", "000000000"},new int[]{2, 7}) );
  }



  @Test
  public void test45(){
    assertEquals(12, solver.maxNewWires(new String[]{"01000000", "10000000", "00011000", "00100000", "00100000", "00000010", "00000100", "00000000"},new int[]{1, 3}) );
  }



  @Test
  public void test46(){
    assertEquals(32, solver.maxNewWires(new String[]{"0100000000000", "1010000000000", "0100000000000", "0000000100000", "0000011000000", "0000100000000", "0000100100000", "0001001000000", "0000000000000", "0000000000100", "0000000001000", "0000000000000", "0000000000000"},new int[]{2, 4, 12}) );
  }



  @Test
  public void test47(){
    assertEquals(27, solver.maxNewWires(new String[]{"0000000001", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "1000000000"},new int[]{3, 6, 8}) );
  }



  @Test
  public void test48(){
    assertEquals(0, solver.maxNewWires(new String[]{"0100", "1000", "0001", "0010"},new int[]{0, 2}) );
  }



  @Test
  public void test49(){
    assertEquals(2, solver.maxNewWires(new String[]{"0000", "0000", "0001", "0010"},new int[]{0, 2}) );
  }



  @Test
  public void test50(){
    assertEquals(128, solver.maxNewWires(new String[]{"010000000000000000000000000", "101000000000000000000000000", "010000000000000000000000000", "000010000000000000000000000", "000101000000000000000000000", "000010000000000000000000000", "000000010000000000000000000", "000000101000000000000000000", "000000010100000000000000000", "000000001000000000000000000", "000000000001000000000000000", "000000000010100000000000000", "000000000001010000000000000", "000000000000100000000000000", "000000000000000100000000000", "000000000000001010000000000", "000000000000000101000000000", "000000000000000010000000000", "000000000000000000010000000", "000000000000000000101000000", "000000000000000000010100000", "000000000000000000001000000", "000000000000000000000001000", "000000000000000000000010100", "000000000000000000000001010", "000000000000000000000000101", "000000000000000000000000010"},new int[]{0, 3, 6, 10}) );
  }



  @Test
  public void test51(){
    assertEquals(7, solver.maxNewWires(new String[]{"000000", "001000", "010000", "000010", "000101", "000010"},new int[]{0, 5}) );
  }



  @Test
  public void test52(){
    assertEquals(3, solver.maxNewWires(new String[]{"01000000", "10000000", "00011000", "00101000", "00110000", "00000010", "00000100", "00000000"},new int[]{0, 2, 5}) );
  }



  @Test
  public void test53(){
    assertEquals(7, solver.maxNewWires(new String[]{"00000000", "00000000", "00010000", "00101000", "00010100", "00001000", "00000001", "00000010"},new int[]{0, 2, 6}) );
  }



  @Test
  public void test54(){
    assertEquals(11, solver.maxNewWires(new String[]{"01100000", "10100000", "11000000", "00001000", "00010000", "00000010", "00000100", "00000000"},new int[]{0, 3}) );
  }



  @Test
  public void test55(){
    assertEquals(16, solver.maxNewWires(new String[]{"01100000000", "10100000000", "11000000000", "00001110000", "00010110000", "00011010000", "00011100000", "00000000111", "00000001011", "00000001101", "00000001110"},new int[]{0, 3}) );
  }



  @Test
  public void test56(){
    assertEquals(17, solver.maxNewWires(new String[]{"010000000", "100000000", "000100000", "001000000", "000001100", "000010000", "000010000", "000000001", "000000010"},new int[]{4, 8}) );
  }



  @Test
  public void test57(){
    assertEquals(36, solver.maxNewWires(new String[]{"00000000000", "00111000000", "01001000000", "01001000000", "01110000000", "00000011000", "00000100100", "00000100100", "00000011000", "00000000000", "00000000000"},new int[]{0, 5}) );
  }



  @Test
  public void test58(){
    assertEquals(59, solver.maxNewWires(new String[]{"0000000000000000000", "0000011000010000000", "0000000000000000000", "0000100000000000000", "0001000001000000000", "0100000000000000000", "0100000000010000000", "0000000000000000000", "0000000000100000000", "0000100000000000000", "0000000010000000000", "0100001000000000000", "0000000000000111100", "0000000000001010000", "0000000000001100000", "0000000000001000100", "0000000000001001000", "0000000000000000001", "0000000000000000010"},new int[]{1, 2, 8, 12}) );
  }



  @Test
  public void test59(){
    assertEquals(5, solver.maxNewWires(new String[]{"00000", "00100", "01000", "00000", "00000"},new int[]{0, 1}) );
  }



  @Test
  public void test60(){
    assertEquals(4, solver.maxNewWires(new String[]{"0000000", "0010000", "0100000", "0000100", "0001010", "0000100", "0000000"},new int[]{0, 1, 3}) );
  }



  @Test
  public void test61(){
    assertEquals(0, solver.maxNewWires(new String[]{"00000", "00000", "00000", "00000", "00000"},new int[]{0, 1, 2, 3, 4}) );
  }



  @Test
  public void test62(){
    assertEquals(0, solver.maxNewWires(new String[]{"0"},new int[]{0}) );
  }



  @Test
  public void test63(){
    assertEquals(9, solver.maxNewWires(new String[]{"000000", "000000", "000000", "000010", "000100", "000000"},new int[]{3, 5}) );
  }



  @Test
  public void test64(){
    assertEquals(12, solver.maxNewWires(new String[]{"0000000", "0000000", "0000000", "0000100", "0001010", "0000101", "0000010"},new int[]{2, 3}) );
  }



  @Test
  public void test65(){
    assertEquals(9, solver.maxNewWires(new String[]{"000100100", "000010001", "000010000", "100001000", "011000000", "000100000", "100000010", "000000100", "010000000"},new int[]{3, 4}) );
  }



  @Test
  public void test66(){
    assertEquals(4, solver.maxNewWires(new String[]{"01100000", "10100000", "11000000", "00000000", "00000111", "00001011", "00001101", "00001110"},new int[]{0, 7}) );
  }



  @Test
  public void test67(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00000", "00010", "00101", "00010"},new int[]{1, 4}) );
  }



  @Test
  public void test68(){
    assertEquals(936, solver.maxNewWires(new String[]{},new int[]{0, 1, 2}) );
  }



  @Test
  public void test69(){
    assertEquals(8, solver.maxNewWires(new String[]{"000000", "001000", "010000", "000000", "000001", "000010"},new int[]{0, 1}) );
  }



  @Test
  public void test70(){
    assertEquals(5, solver.maxNewWires(new String[]{"0100", "1000", "0000", "0000"},new int[]{0}) );
  }



  @Test
  public void test71(){
    assertEquals(80, solver.maxNewWires(new String[]{"0110000000000000000", "1001000000000000000", "1000000000000000000", "0100100000000000000", "0001010000000000000", "0000100000000000000", "0000000111100000000", "0000001011100000000", "0000001101100000000", "0000001110100000000", "0000001111000000000", "0000000000001000000", "0000000000010100000", "0000000000001000000", "0000000000000001010", "0000000000000010100", "0000000000000001010", "0000000000000010100", "0000000000000000000"},new int[]{3, 6}) );
  }



  @Test
  public void test72(){
    assertEquals(22, solver.maxNewWires(new String[]{"011100000000", "100000000000", "100000000000", "100000000000", "000001111000", "000010110000", "000011011000", "000011100000", "000010100000", "000000000010", "000000000100", "000000000000"},new int[]{0, 4}) );
  }



  @Test
  public void test73(){
    assertEquals(2, solver.maxNewWires(new String[]{"0000", "0010", "0100", "0000"},new int[]{0, 1}) );
  }



  @Test
  public void test74(){
    assertEquals(23, solver.maxNewWires(new String[]{"01000000", "10000000", "00010000", "00101000", "00010000", "00000010", "00000101", "00000010"},new int[]{1}) );
  }



  @Test
  public void test75(){
    assertEquals(8, solver.maxNewWires(new String[]{"0100000", "1000000", "0000000", "0000000", "0000001", "0000001", "0000110"},new int[]{0, 5}) );
  }



  @Test
  public void test76(){
    assertEquals(11, solver.maxNewWires(new String[]{"010000000", "101000000", "010100000", "001000000", "000001000", "000010000", "000000000", "000000001", "000000010"},new int[]{2, 6, 8}) );
  }



  @Test
  public void test77(){
    assertEquals(4, solver.maxNewWires(new String[]{"01000", "10010", "00000", "01000", "00000"},new int[]{2, 4}) );
  }



  @Test
  public void test78(){
    assertEquals(2, solver.maxNewWires(new String[]{"010", "100", "000"},new int[]{2}) );
  }



  @Test
  public void test79(){
    assertEquals(18, solver.maxNewWires(new String[]{"0110000000", "1010000000", "1100000000", "0000001000", "0000011000", "0000100000", "0001100000", "0000000000", "0000000000", "0000000000"},new int[]{1, 3}) );
  }



  @Test
  public void test80(){
    assertEquals(99, solver.maxNewWires(new String[]{"01111000000000000000", "10111000000000000000", "11011000000000000000", "11101000000000000000", "11110000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000001111110"},new int[]{2, 17}) );
  }



  @Test
  public void test81(){
    assertEquals(2, solver.maxNewWires(new String[]{"0000", "0000", "0001", "0010"},new int[]{1, 2}) );
  }



  @Test
  public void test82(){
    assertEquals(3, solver.maxNewWires(new String[]{"01100", "10100", "11000", "00000", "00000"},new int[]{1, 4}) );
  }



  @Test
  public void test83(){
    assertEquals(0, solver.maxNewWires(new String[]{"00", "00"},new int[]{0, 1}) );
  }



  @Test
  public void test84(){
    assertEquals(4, solver.maxNewWires(new String[]{"0100", "1000", "0001", "0010"},new int[]{0}) );
  }



  @Test
  public void test85(){
    assertEquals(2, solver.maxNewWires(new String[]{"000", "001", "010"},new int[]{0}) );
  }



  @Test
  public void test86(){
    assertEquals(4, solver.maxNewWires(new String[]{"010000", "100000", "000110", "001000", "001000", "000000"},new int[]{0, 2}) );
  }



  @Test
  public void test87(){
    assertEquals(8, solver.maxNewWires(new String[]{"0100000", "1000000", "0001100", "0010000", "0010000", "0000000", "0000000"},new int[]{0, 2}) );
  }



  @Test
  public void test88(){
    assertEquals(8, solver.maxNewWires(new String[]{"01100000", "10000000", "10000000", "00001100", "00010000", "00010000", "00000001", "00000010"},new int[]{0, 3}) );
  }



  @Test
  public void test89(){
    assertEquals(9, solver.maxNewWires(new String[]{"000000", "001000", "010000", "000000", "000000", "000000"},new int[]{0, 1}) );
  }



  @Test
  public void test90(){
    assertEquals(2, solver.maxNewWires(new String[]{"00100", "00001", "10000", "00000", "01000"},new int[]{0, 1}) );
  }



  @Test
  public void test91(){
    assertEquals(7, solver.maxNewWires(new String[]{"011000", "100000", "100000", "000000", "000001", "000010"},new int[]{3, 4}) );
  }



  @Test
  public void test92(){
    assertEquals(13, solver.maxNewWires(new String[]{"011000000", "100000000", "100000000", "000011100", "000100000", "000100000", "000100000", "000000000", "000000000"},new int[]{0, 3}) );
  }



  @Test
  public void test93(){
    assertEquals(3, solver.maxNewWires(new String[]{"010000", "101000", "010100", "001000", "000001", "000010"},new int[]{2, 4}) );
  }



  @Test
  public void test94(){
    assertEquals(4, solver.maxNewWires(new String[]{"0100", "1010", "0100", "0000"},new int[]{3}) );
  }



  @Test
  public void test95(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00100", "01000", "00001", "00010"},new int[]{0, 1}) );
  }



  @Test
  public void test96(){
    assertEquals(9, solver.maxNewWires(new String[]{"010000", "100000", "000000", "000000", "000000", "000000"},new int[]{1, 3}) );
  }



  @Test
  public void test97(){
    assertEquals(18, solver.maxNewWires(new String[]{"01000000000", "10000000000", "00010000000", "00101100000", "00010000000", "00010000000", "00000000000", "00000000000", "00000000000", "00000000000", "00000000000"},new int[]{0, 2, 6, 7}) );
  }



  @Test
  public void test98(){
    assertEquals(81, solver.maxNewWires(new String[]{},new int[]{2, 7, 9, 14, 15, 16, 17, 19, 25, 29, 33, 38}) );
  }



  @Test
  public void test99(){
    assertEquals(0, solver.maxNewWires(new String[]{"011", "101", "110"},new int[]{0}) );
  }



  @Test
  public void test100(){
    assertEquals(6, solver.maxNewWires(new String[]{"01000000", "10100000", "01010000", "00100000", "00000100", "00001010", "00000101", "00000010"},new int[]{2, 6}) );
  }



  @Test
  public void test101(){
    assertEquals(104, solver.maxNewWires(new String[]{"0110000000000000000000", "1000000000000000000000", "1000000000000000000000", "0000110000000000000000", "0001000000000000000000", "0001000000000000000000", "0000000110000000000000", "0000001000000000000000", "0000001000000000000000", "0000000000100000000000", "0000000001000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000"},new int[]{0, 3, 6, 18}) );
  }



  @Test
  public void test102(){
    assertEquals(30, solver.maxNewWires(new String[]{"000000000001100", "001110000000000", "010000000000000", "010010000000000", "010100000000000", "000000000000000", "000000010000010", "000000100000010", "000000000110000", "000000001000000", "000000001000000", "100000000000100", "100000000001000", "000000110000000", "000000000000000"},new int[]{1, 8, 13}) );
  }



  @Test
  public void test103(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00000", "00011", "00100", "00100"},new int[]{0, 2}) );
  }



  @Test
  public void test104(){
    assertEquals(23, solver.maxNewWires(new String[]{"0100000000", "1000000000", "0000000000", "0000000000", "0000010000", "0000100000", "0000000110", "0000001001", "0000001001", "0000000110"},new int[]{0, 6}) );
  }



  @Test
  public void test105(){
    assertEquals(923, solver.maxNewWires(new String[]{},new int[]{0}) );
  }



  @Test
  public void test106(){
    assertEquals(23, solver.maxNewWires(new String[]{"0100000000", "1000000000", "0001000000", "0010100000", "0001000000", "0000001000", "0000010000", "0000000010", "0000000101", "0000000010"},new int[]{0, 2}) );
  }



  @Test
  public void test107(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00000", "00011", "00100", "00100"},new int[]{1, 2}) );
  }



  @Test
  public void test108(){
    assertEquals(4, solver.maxNewWires(new String[]{"0110", "1000", "1000", "0000"},new int[]{3}) );
  }



  @Test
  public void test109(){
    assertEquals(4, solver.maxNewWires(new String[]{"000000", "001000", "010000", "000011", "000100", "000100"},new int[]{1, 3}) );
  }



  @Test
  public void test110(){
    assertEquals(58, solver.maxNewWires(new String[]{"0100000000000000", "1010000000000000", "0101000000000000", "0010000000000000", "0000010000000000", "0000101000000000", "0000010100000000", "0000001010000000", "0000000100000000", "0000000000100000", "0000000001000000", "0000000000000100", "0000000000000010", "0000000000010000", "0000000000001000", "0000000000000000"},new int[]{12, 11, 10}) );
  }



  @Test
  public void test111(){
    assertEquals(13, solver.maxNewWires(new String[]{"0000000", "0010000", "0101000", "0010000", "0000000", "0000000", "0000000"},new int[]{0, 1}) );
  }



  @Test
  public void test112(){
    assertEquals(22, solver.maxNewWires(new String[]{"00011110101", "00000000000", "00010101100", "10100000101", "10000100101", "10101011100", "10000100101", "00100100101", "10111111001", "00000000000", "10011011100"},new int[]{1, 9}) );
  }



  @Test
  public void test113(){
    assertEquals(7, solver.maxNewWires(new String[]{"01000", "10000", "00011", "00100", "00100"},new int[]{0}) );
  }



  @Test
  public void test114(){
    assertEquals(2, solver.maxNewWires(new String[]{"0000", "0000", "0001", "0010"},new int[]{0, 1}) );
  }



  @Test
  public void test115(){
    assertEquals(22, solver.maxNewWires(new String[]{"01000000000", "10000110000", "00010000000", "00100000000", "00000000000", "01000010000", "01000100000", "00000000100", "00000001001", "00000000000", "00000000100"},new int[]{2, 4, 7}) );
  }



  @Test
  public void test116(){
    assertEquals(7, solver.maxNewWires(new String[]{"000000", "001000", "010000", "000011", "000100", "000100"},new int[]{0, 1}) );
  }



  @Test
  public void test117(){
    assertEquals(4, solver.maxNewWires(new String[]{"01000", "10000", "00010", "00100", "00000"},new int[]{0, 4}) );
  }



  @Test
  public void test118(){
    assertEquals(6, solver.maxNewWires(new String[]{"0000", "0000", "0000", "0000"},new int[]{0}) );
  }



  @Test
  public void test119(){
    assertEquals(11, solver.maxNewWires(new String[]{"0000000", "0000000", "0001000", "0010100", "0001010", "0000101", "0000010"},new int[]{0, 2}) );
  }



  @Test
  public void test120(){
    assertEquals(3, solver.maxNewWires(new String[]{"0100", "1001", "0001", "0110"},new int[]{1}) );
  }



  @Test
  public void test121(){
    assertEquals(5, solver.maxNewWires(new String[]{"01000", "10000", "00000", "00000", "00000"},new int[]{0, 2}) );
  }



  @Test
  public void test122(){
    assertEquals(8, solver.maxNewWires(new String[]{"0111100000", "1011100000", "1101100000", "1110100000", "1111000000", "0000000010", "0000000010", "0000000010", "0000011100", "0000000000"},new int[]{0, 7}) );
  }



  @Test
  public void test123(){
    assertEquals(2, solver.maxNewWires(new String[]{"0000", "0001", "0000", "0100"},new int[]{0, 1}) );
  }



  @Test
  public void test124(){
    assertEquals(8, solver.maxNewWires(new String[]{"000101", "000001", "000011", "100001", "001001", "111110"},new int[]{3}) );
  }



  @Test
  public void test125(){
    assertEquals(6, solver.maxNewWires(new String[]{"0100000", "1000000", "0001100", "0010100", "0011000", "0000001", "0000010"},new int[]{0, 2}) );
  }



  @Test
  public void test126(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00000", "00010", "00101", "00010"},new int[]{1, 3}) );
  }



  @Test
  public void test127(){
    assertEquals(4, solver.maxNewWires(new String[]{"00100000", "00010000", "10001010", "01000101", "00100010", "00010001", "00101000", "00010100"},new int[]{0, 1}) );
  }



  @Test
  public void test128(){
    assertEquals(984, solver.maxNewWires(new String[]{"01100000000000000000000000000000000000000000000000", "10010000000000000000000000000000000000000000000000", "10010000000000000000000000000000000000000000000000", "01100000000000000000000000000000000000000000000000", "00000100000000000000000000000000000000000000000000", "00001010000000000000000000000000000000000000000000", "00000100000000000000000000000000000000000000000000", "00000000100000000000000000000000000000000000000000", "00000001000000000000000000000000000000000000000000", "00000000001000000000000000000000000000000000000000", "00000000010100000000000000000000000000000000000000", "00000000001010000000000000000000000000000000000000", "00000000000100000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"},new int[]{2, 5, 7}) );
  }



  @Test
  public void test129(){
    assertEquals(909, solver.maxNewWires(new String[]{},new int[]{0, 5, 8}) );
  }



  @Test
  public void test130(){
    assertEquals(2, solver.maxNewWires(new String[]{"01100", "10100", "11010", "00100", "00000"},new int[]{2, 4}) );
  }



  @Test
  public void test131(){
    assertEquals(13, solver.maxNewWires(new String[]{"000000000", "001000000", "010010000", "000010000", "001100000", "000000000", "000000001", "000000001", "000000110"},new int[]{3, 6}) );
  }



  @Test
  public void test132(){
    assertEquals(0, solver.maxNewWires(new String[]{"01111", "10111", "11011", "11101", "11110"},new int[]{0}) );
  }



  @Test
  public void test133(){
    assertEquals(26, solver.maxNewWires(new String[]{"0010000000000", "0001000000000", "1000000100000", "0100001000000", "0000010000000", "0000100000000", "0001000000000", "0010000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000"},new int[]{3, 7, 9, 12}) );
  }



  @Test
  public void test134(){
    assertEquals(7, solver.maxNewWires(new String[]{"0100000", "1000000", "0001000", "0010100", "0001000", "0000001", "0000010"},new int[]{0, 2}) );
  }



  @Test
  public void test135(){
    assertEquals(14, solver.maxNewWires(new String[]{"0100000000", "1010000000", "0101000000", "0010000000", "0000010000", "0000101000", "0000010100", "0000001000", "0000000001", "0000000010"},new int[]{2, 6}) );
  }



  @Test
  public void test136(){
    assertEquals(7, solver.maxNewWires(new String[]{"01100000", "10000000", "10000000", "00000000", "00000110", "00001010", "00001101", "00000010"},new int[]{0, 4}) );
  }



  @Test
  public void test137(){
    assertEquals(1035, solver.maxNewWires(new String[]{},new int[]{0, 1, 2, 3, 4}) );
  }



  @Test
  public void test138(){
    assertEquals(7, solver.maxNewWires(new String[]{"000000", "001100", "010000", "010000", "000001", "000010"},new int[]{0, 1}) );
  }



  @Test
  public void test139(){
    assertEquals(0, solver.maxNewWires(new String[]{"0010", "0001", "1000", "0100"},new int[]{0, 1}) );
  }



  @Test
  public void test140(){
    assertEquals(2, solver.maxNewWires(new String[]{"0000", "0010", "0100", "0000"},new int[]{2, 0}) );
  }



  @Test
  public void test141(){
    assertEquals(4, solver.maxNewWires(new String[]{"000000", "001000", "010000", "000010", "000101", "000010"},new int[]{1, 3}) );
  }



  @Test
  public void test142(){
    assertEquals(0, solver.maxNewWires(new String[]{"010000", "100000", "000100", "001000", "000001", "000010"},new int[]{0, 2, 4}) );
  }



  @Test
  public void test143(){
    assertEquals(11, solver.maxNewWires(new String[]{"00000010", "00101000", "01001000", "00000100", "01100000", "00010000", "10000000", "00000000"},new int[]{2, 3}) );
  }



  @Test
  public void test144(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00100", "01000", "00001", "00010"},new int[]{0, 4}) );
  }



  @Test
  public void test145(){
    assertEquals(2, solver.maxNewWires(new String[]{"0000", "0000", "0001", "0010"},new int[]{0, 3}) );
  }



  @Test
  public void test146(){
    assertEquals(19, solver.maxNewWires(new String[]{"0100000000", "1010000000", "0100000000", "0000101000", "0001010000", "0000100000", "0001000000", "0000000000", "0000000000", "0000000000"},new int[]{0, 3}) );
  }



  @Test
  public void test147(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00000", "00010", "00101", "00010"},new int[]{0, 4}) );
  }



  @Test
  public void test148(){
    assertEquals(4, solver.maxNewWires(new String[]{"00000", "00000", "00010", "00101", "00010"},new int[]{0, 2}) );
  }



  @Test
  public void test149(){
    assertEquals(535, solver.maxNewWires(new String[]{},new int[]{0, 10, 22, 30, 40}) );
  }



  @Test
  public void test150(){
    assertEquals(4, solver.maxNewWires(new String[]{"010000", "100000", "000100", "001010", "000100", "000000"},new int[]{0, 2}) );
  }



  @Test
  public void test151(){
    assertEquals(2, solver.maxNewWires(new String[]{"010000", "101000", "010000", "000010", "000101", "000010"},new int[]{0, 3}) );
  }



  @Test
  public void test152(){
    assertEquals(435, solver.maxNewWires(new String[]{},new int[]{0}) );
  }



  @Test
  public void test153(){
    assertEquals(3, solver.maxNewWires(new String[]{"00000", "00000", "00011", "00101", "00110"},new int[]{0, 2}) );
  }



  @Test
  public void test154(){
    assertEquals(17, solver.maxNewWires(new String[]{"0000000110", "0010000000", "0100000000", "0000000001", "0000000000", "0000001000", "0000010000", "1000000000", "1000000000", "0001000000"},new int[]{3, 4, 5}) );
  }



  @Test
  public void test155(){
    assertEquals(4, solver.maxNewWires(new String[]{"0110000", "1000000", "1000000", "0000100", "0001010", "0000101", "0000010"},new int[]{0, 3}) );
  }



  @Test
  public void test156(){
    assertEquals(0, solver.maxNewWires(new String[]{"001", "000", "100"},new int[]{0, 1}) );
  }



}


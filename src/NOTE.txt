
-------------------------------------
Git Email Setting
https://help.github.com/articles/setting-your-email-in-git

# Set a new email
git config --global user.email "me@here.com"

# Verify the setting
git config --global user.email
-------------------------------------


  int color(String[] points){
        String s = "";
        for (String p : points) {
            s += p;
        }
        String[] ps = s.split(" ");

        int N = ps.length;
        int[] p = new int[N];
        for (int i = 0; i < N; i++) {
            p[i] = Integer.parseInt(ps[i]);
        }

        Arrays.sort(p);

        System.err.printf("p=%s\n", Arrays.toString(p));

        int ma = 0;
        Set<Integer> adjs = new HashSet<>();
        for (int i = 0; i < N; i++) {
            for (int j = i+1; j < N; j++) {
                int adj = p[j] - p[i];
                if ( adjs.contains(Integer.valueOf(adj)) ) continue;
                adjs.add(Integer.valueOf(adj));

                // System.err.printf("adj=%s \n", adj);

                Map<Integer, Integer> m = new HashMap<>();
                for (int k = 0; k < N; k++) {
                    m.put(Integer.valueOf(( p[k] + adj ) % 360), k);
                }

                BiMatching bi = new BiMatching(N + 2);
                for (int k = 0; k < N; k++) {
                    Integer idx = m.get(Integer.valueOf(p[k]));
                    if (idx != null) {
                        // k and idx are connected
                        bi.addEdge(k+2, idx+2);
                        bi.addEdge(idx+2, k+2);
                    }
                }

//                System.err.printf("cap1--\n");
//                for (int k = 0; k < bi.ff.capacity.length; k++) {
//                    System.err.printf("k=%s, %s\n", k, bi.ff.capacity[k]);
//                }
//                System.err.printf("cap1E--\n");

                used = new boolean[N+2];
                used[0] = true;
                used[1] = true;
                for (int k = 0; k < N; k++) {
                    if (used[k+2]) continue;

                    dfs(bi, k+2, 0);
                }

                // bi.ff.capacity


                int so = bi.sovle();

                int matching = so;
                // int matching = bi.getMatchResult().size();

                if (ma < matching * 2) {
//                    System.err.printf("cap--\n");
//                    for (int k = 0; k < bi.ff.capacity.length; k++) {
//                        System.err.printf("k=%s, %s\n", k, bi.ff.capacity[k]);
//                    }
//                    System.err.printf("capE--\n");

                    ma = Math.max(ma, matching * 2);
                    System.err.printf("ma = %s, adj = %s\n", ma, adj);
                    System.err.printf("bi matching = %s\n", bi.getMatchResult());
                }
            }
        }

        return ma;
    }

    boolean[] used;

    void dfs(BiMatching bi, int v, int s) {
        used[v] = true;

        if (s == 0) {
            // connect to source
            bi.addEdge(0, v);
        } else {
            // conenct to sink
            bi.addEdge(v, 1);
        }

        for (FordFulkerson.Edge e : bi.ff.capacity[v]) {
            if (used[e.to]) continue;

            dfs(bi, e.to, (s+1)%2);
        }
    }

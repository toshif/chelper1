

package tc.p406_DI_2;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class FoldThePaperSysTest {

  FoldThePaper solver; 

  @Before
  public void setUp() {
    solver = new FoldThePaper();
  }

  

  @Test
  public void test0(){
    assertEquals(6, solver.getValue(new String[]{"1 1 1", "1 1 1"}) );
  }



  @Test
  public void test1(){
    assertEquals(2, solver.getValue(new String[]{"1 -1", "1 -1"}) );
  }



  @Test
  public void test2(){
    assertEquals(1, solver.getValue(new String[]{"1"}) );
  }



  @Test
  public void test3(){
    assertEquals(4, solver.getValue(new String[]{"1 -1 -1 1", "-1 -1 -1 -1", "-1 -1 -1 -1", "1 -1 -1 1"}) );
  }



  @Test
  public void test4(){
    assertEquals(-1, solver.getValue(new String[]{"-1"}) );
  }



  @Test
  public void test5(){
    assertEquals(100, solver.getValue(new String[]{"1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1"}) );
  }



  @Test
  public void test6(){
    assertEquals(131, solver.getValue(new String[]{"20 13 -2 100", "-12 0 4 -3", "4 1 -36 21"}) );
  }



  @Test
  public void test7(){
    assertEquals(-1, solver.getValue(new String[]{"-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1"}) );
  }



  @Test
  public void test8(){
    assertEquals(0, solver.getValue(new String[]{"0"}) );
  }



  @Test
  public void test9(){
    assertEquals(2, solver.getValue(new String[]{"-1", "-1", "1", "1", "-1", "-1"}) );
  }



  @Test
  public void test10(){
    assertEquals(1, solver.getValue(new String[]{"1", "-1", "1", "-1", "-1", "-1"}) );
  }



  @Test
  public void test11(){
    assertEquals(2, solver.getValue(new String[]{"-1", "1", "-1", "-1", "1", "-1"}) );
  }



  @Test
  public void test12(){
    assertEquals(4, solver.getValue(new String[]{"1", "1", "-1", "1", "1", "1"}) );
  }



  @Test
  public void test13(){
    assertEquals(2, solver.getValue(new String[]{"1", "1", "-1", "1", "-1", "1"}) );
  }



  @Test
  public void test14(){
    assertEquals(1, solver.getValue(new String[]{"-1 -1 1 -1 -1"}) );
  }



  @Test
  public void test15(){
    assertEquals(2, solver.getValue(new String[]{"-1 -1 1 1 -1"}) );
  }



  @Test
  public void test16(){
    assertEquals(2, solver.getValue(new String[]{"-1 1 1 1 -1"}) );
  }



  @Test
  public void test17(){
    assertEquals(1, solver.getValue(new String[]{"-1 1 -1 1 -1"}) );
  }



  @Test
  public void test18(){
    assertEquals(3, solver.getValue(new String[]{"1 1 1 -1 -1"}) );
  }



  @Test
  public void test19(){
    assertEquals(144, solver.getValue(new String[]{"1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1"}) );
  }



  @Test
  public void test20(){
    assertEquals(232, solver.getValue(new String[]{"-21", "-90", "-71", "85", "50", "-53", "62", "1", "84"}) );
  }



  @Test
  public void test21(){
    assertEquals(67, solver.getValue(new String[]{"-83", "-23", "67"}) );
  }



  @Test
  public void test22(){
    assertEquals(728, solver.getValue(new String[]{"-65 49 -24 -85 -59 -62 8", "74 -60 80 38 -49 79 -21", "97 22 -14 -36 0 -80 -53", "12 31 50 50 61 -33 31", "-88 -52 -23 -47 -54 -65 38", "18 100 17 17 31 98 55", "-62 -46 5 13 1 56 86", "-37 97 -80 -67 -89 28 85", "34 49 62 -60 -78 100 -61", "62 8 -88 2 10 -78 -79"}) );
  }



  @Test
  public void test23(){
    assertEquals(784, solver.getValue(new String[]{"27 -22 -1 81 82 -69 98 -16 -92 -49", "30 -65 -43 53 50 21 -59 -6 78 -55", "23 19 -82 -36 87 -3 37 -39 -10 85", "68 70 -79 22 27 -40 -33 34 -49 49", "-7 -8 -91 -65 28 -32 -57 -53 -45 68", "98 90 15 18 -7 55 74 -51 -71 -2", "-15 53 -3 95 -36 4 54 52 20 15", "36 35 -90 -7 -19 -82 -69 -20 -19 -72"}) );
  }



  @Test
  public void test24(){
    assertEquals(1038, solver.getValue(new String[]{"81 -66 27 -89 -54 30 47 -10 92 66", "59 -55 4 94 41 99 92 74 83 -51", "0 -84 -85 -28 -27 77 -41 59 30 22", "92 100 70 18 -78 83 2 35 -13 30", "-26 -9 69 100 42 -35 14 35 -54 44", "-4 25 -42 -55 18 -71 -48 7 -56 99", "-68 -71 -8 -70 -64 -33 6 -48 1 27"}) );
  }



  @Test
  public void test25(){
    assertEquals(299, solver.getValue(new String[]{"54", "52", "30", "-42", "27", "4", "99", "-36", "-100", "60"}) );
  }



  @Test
  public void test26(){
    assertEquals(114, solver.getValue(new String[]{"82 32 -24 -21"}) );
  }



  @Test
  public void test27(){
    assertEquals(978, solver.getValue(new String[]{"84 -11 -80 32 86 88 -93 -4 -89 -35", "-7 31 -77 93 -15 63 -66 -84 -70 86", "-98 59 -65 -82 -94 -3 -10 86 53 81", "63 -77 67 4 -15 -79 59 -99 -29 -86", "-77 78 -16 55 45 -35 -43 -67 -69 -51", "21 39 8 13 42 5 83 -47 76 -14", "2 -100 -95 -73 51 -12 12 76 -76 -35", "27 -35 99 83 66 -10 -5 8 -63 -77", "-34 55 -96 70 59 -49 59 -82 -54 91", "53 -42 66 68 -83 -28 54 -73 93 86", "-1 -36 -62 63 79 -64 9 26 0 15", "60 63 60 -5 51 -84 -80 -2 65 4"}) );
  }



  @Test
  public void test28(){
    assertEquals(258, solver.getValue(new String[]{"42 -2 84 -72 27 -72 -40", "-71 -77 86 -9 86 -32 93", "49 4 56 -60 7 -24 -19", "-27 78 -1 -70 55 46 -42", "-79 -22 33 -64 27 -56 81", "28 59 -95 78 -94 49 -73"}) );
  }



  @Test
  public void test29(){
    assertEquals(858, solver.getValue(new String[]{"50 -60 7 -68 24 -64 34", "-49 -17 -77 -27 -38 -86 -15", "-27 38 0 -32 41 -76 -88", "63 92 84 -19 -93 -54 -11", "37 -40 -73 77 -92 -2 1", "23 56 -86 -80 -29 -62 -77", "25 37 71 -99 -94 69 78", "7 71 72 15 -49 62 44", "-92 55 84 -71 -43 4 97"}) );
  }



  @Test
  public void test30(){
    assertEquals(240, solver.getValue(new String[]{"-43 56", "-86 -13", "-44 -43", "-13 60", "75 38", "4 59", "-22 26", "-41 0"}) );
  }



  @Test
  public void test31(){
    assertEquals(1275, solver.getValue(new String[]{"-59 44 100 27 36 -100 -46 89 -35 -21 89", "-48 -70 -8 32 -94 93 -78 -62 63 73 80", "-73 -64 97 -44 82 21 -71 18 68 -92 18", "5 55 100 -56 -61 -17 -36 -36 -70 47 -63", "-82 1 -92 -75 27 82 -16 53 -16 19 -21", "25 -62 -69 98 61 -7 -13 45 9 93 10", "19 72 -36 64 54 14 -69 77 92 50 -73", "-1 -9 -65 91 -74 72 -57 -51 69 -3 8", "43 -57 24 -95 5 99 13 -53 -36 -67 91", "88 43 74 68 -16 7 12 39 79 -2 38", "-10 9 -93 -42 88 33 84 23 -48 23 81"}) );
  }



  @Test
  public void test32(){
    assertEquals(349, solver.getValue(new String[]{"71 5 -70 -70 -84 9 -84 23 -73 17", "70 64 -75 -45 1 54 -43 43 27 -100", "68 -68 18 7 -54 -6 -84 36 -19 -13", "-60 11 -97 -66 76 -45 72 -60 18 -25", "-33 -69 78 -47 -43 15 -28 -34 -78 91", "4 -3 -78 -73 -2 79 -59 -57 -6 18", "-20 -3 99 20 66 -35 43 22 -72 69"}) );
  }



  @Test
  public void test33(){
    assertEquals(946, solver.getValue(new String[]{"-77 -75 -2", "87 -91 -66", "-46 86 85", "-75 -33 -81", "28 67 74", "8 98 96", "86 59 30", "45 45 10", "68 33 49", "-8 37 68", "-22 21 54"}) );
  }



  @Test
  public void test34(){
    assertEquals(406, solver.getValue(new String[]{"-82 67 58 23 66 -11 -73 93", "-56 -90 -62 74 23 -54 8 -10", "24 -64 -18 18 27 -15 -10 92"}) );
  }



  @Test
  public void test35(){
    assertEquals(358, solver.getValue(new String[]{"-20 64 13 21 60 5 -55 -19 34 -60 -46", "-71 -65 4 31 97 -21 -5 -92 -5 92 52", "88 4 65 -72 -19 -33 26 63 70 -90 -56", "92 30 -73 -1 -13 -58 58 -98 -4 36 -73", "35 27 27 -31 -18 54 31 17 -76 -71 -76", "16 -76 -1 70 16 -91 -49 94 -95 -75 -56"}) );
  }



  @Test
  public void test36(){
    assertEquals(110, solver.getValue(new String[]{"85 25"}) );
  }



  @Test
  public void test37(){
    assertEquals(142, solver.getValue(new String[]{"39 -72 46 42 15", "47 84 -49 -88 11"}) );
  }



  @Test
  public void test38(){
    assertEquals(510, solver.getValue(new String[]{"-22 -43 73 16", "-14 1 4 -13", "60 35 37 -77", "86 36 33 -4", "19 96 91 7", "-94 -27 -1 88", "55 -54 -8 -46", "56 -26 -12 -20"}) );
  }



  @Test
  public void test39(){
    assertEquals(1252, solver.getValue(new String[]{"-42 14 73 -35 -36 26 93 -27 11 -13 -99 79", "-51 63 15 -50 43 16 -29 -5 84 -90 49 79", "-86 84 85 -89 -96 14 -29 21 100 -17 20 -54", "99 -90 22 46 -53 58 28 -13 58 33 92 15", "-23 -5 59 32 -61 61 -11 80 9 1 -23 52", "3 -36 -39 60 83 91 64 98 38 95 -75 0", "12 -31 39 43 -4 24 -24 -55 -85 -8 76 -93", "29 55 -65 -72 -82 -100 -46 -26 -83 -67 84 62", "63 33 -75 27 50 27 37 -95 -51 79 -43 65", "23 28 34 -69 -14 33 -72 -52 -31 -68 0 -62"}) );
  }



  @Test
  public void test40(){
    assertEquals(410, solver.getValue(new String[]{"71 59", "91 95", "-57 -20", "40 31", "76 18"}) );
  }



  @Test
  public void test41(){
    assertEquals(546, solver.getValue(new String[]{"96 -88 -93 -13 -75 -19", "-51 28 49 -19 74 86", "5 -83 89 30 -64 -31", "-39 25 34 95 -65 -59", "67 -93 24 -6 -30 97", "-58 -50 26 -85 -97 -30", "81 29 23 64 -76 -50", "23 -57 -45 -16 -10 -28", "-38 -93 20 -71 -65 21", "-40 -49 -76 79 12 10", "43 90 -41 59 65 100"}) );
  }



  @Test
  public void test42(){
    assertEquals(137, solver.getValue(new String[]{"-96", "-47", "59", "78"}) );
  }



  @Test
  public void test43(){
    assertEquals(302, solver.getValue(new String[]{"43 46", "18 58", "13 55", "-60 -74", "93 -14", "-26 42", "-89 38", "-33 -60", "-80 -25", "-76 -56", "37 -64", "-49 63"}) );
  }



  @Test
  public void test44(){
    assertEquals(697, solver.getValue(new String[]{"-63 -65 23 99 70 28 27 83 -77 19", "-86 31 67 -82 -79 -57 -90 -26 -70 -64", "-93 -69 96 -54 -42 -99 13 38 -99 51", "-24 -1 37 -52 -40 -92 -7 -3 -79 -22", "-40 32 -93 45 11 -33 -84 39 80 -31", "-84 59 1 3 78 15 25 -41 -52 -2", "24 88 68 16 -97 -28 93 -7 -77 -84", "18 -5 18 21 78 -44 -71 24 -54 -67", "-98 -27 46 61 34 68 -85 69 -91 -78", "21 -80 19 23 -99 -20 -85 -5 -12 -98"}) );
  }



  @Test
  public void test45(){
    assertEquals(926, solver.getValue(new String[]{"-73 -57 -16 -65 30 -50 -11", "62 23 -82 20 12 0 22", "-8 51 -93 -72 -78 96 43", "85 -44 -39 -68 -87 37 93", "21 -93 -78 -57 -23 -45 45", "96 23 3 -15 89 94 57", "97 -11 65 51 -33 -67 61", "-27 59 -64 56 -95 60 95", "-63 -17 27 49 -100 -24 85", "-88 -95 77 -57 -62 69 30"}) );
  }



  @Test
  public void test46(){
    assertEquals(223, solver.getValue(new String[]{"29 -95 23", "8 22 -71", "75 -44 -3", "18 39 -76", "59 -27 64", "34 34 2"}) );
  }



  @Test
  public void test47(){
    assertEquals(159, solver.getValue(new String[]{"62 -10 -11 21 -70 -93 62 -51 74 -9"}) );
  }



  @Test
  public void test48(){
    assertEquals(1126, solver.getValue(new String[]{"-43 -21 8 75 60 -50 -89 -42 90 43 -5", "77 -37 -21 -13 72 43 -31 67 -18 24 -72", "-18 28 -95 -32 -79 88 6 -98 8 -16 45", "35 -96 12 -21 -64 17 89 77 73 43 98", "-93 -80 11 25 18 12 66 86 -9 50 36", "-15 -60 -83 -9 -84 67 69 36 68 -5 -6", "-8 33 -40 73 -95 82 -80 43 32 59 77", "-66 -21 -25 -11 38 69 -24 -15 -66 -18 -39", "9 73 -99 -31 -4 -26 45 5 -5 -49 -75", "-90 11 -79 -81 -36 -90 -26 15 -98 -38 -8"}) );
  }



  @Test
  public void test49(){
    assertEquals(743, solver.getValue(new String[]{"43 -76 2 -27 56 -77 -63 32 43", "85 -98 -92 -32 82 31 82 -31 45", "-17 41 44 90 -15 6 -9 -89 -12", "53 -13 -84 29 24 82 -24 32 -58", "30 38 6 87 100 -49 16 29 52", "2 76 88 -51 25 94 -25 100 -74"}) );
  }



  @Test
  public void test50(){
    assertEquals(308, solver.getValue(new String[]{"61", "-30", "-59", "7", "29", "75", "98", "51", "-13", "-13"}) );
  }



  @Test
  public void test51(){
    assertEquals(389, solver.getValue(new String[]{"87 3 89 80", "27 -48 -18 -46", "-63 -70 -9 6", "1 -26 -42 46", "30 69 -99 -61", "-28 32 12 83", "-4 -30 82 -17", "-74 -61 -7 -100", "-85 -90 -18 12"}) );
  }



  @Test
  public void test52(){
    assertEquals(382, solver.getValue(new String[]{"60", "26", "94", "-77", "-69", "-1", "-37", "-17", "-25", "79", "44", "79"}) );
  }



  @Test
  public void test53(){
    assertEquals(785, solver.getValue(new String[]{"-35 99 -85 -98 -54 88 -59 77 59 -49", "-41 -85 93 -86 85 -17 -7 86 13 43", "-48 -29 33 -81 -94 26 100 -32 -68 76", "33 -15 -18 33 84 51 100 8 -98 86", "30 91 -27 46 -51 5 -6 35 -72 36", "-79 2 64 -75 47 45 -18 -9 94 69", "-81 -22 -80 -86 93 -6 32 -37 9 -69"}) );
  }



  @Test
  public void test54(){
    assertEquals(969, solver.getValue(new String[]{"18 53 -30 95 75 96 51 100", "-67 -64 -48 77 9 94 19 73", "-35 25 -95 -70 98 -14 -20 -96", "-43 -49 0 52 -99 -60 -71 77", "58 92 60 42 -1 82 -92 -70", "-31 93 37 22 1 76 86 -89", "83 -67 38 -13 76 -72 71 6", "-60 97 63 -31 -49 -35 -57 2"}) );
  }



  @Test
  public void test55(){
    assertEquals(-7, solver.getValue(new String[]{"-36", "-27", "-7", "-67", "-76", "-8"}) );
  }



  @Test
  public void test56(){
    assertEquals(678, solver.getValue(new String[]{"-33 -9 33 -54 -26 1 24", "20 -28 -100 -34 21 -20 98", "98 -83 -21 -1 -31 -59 78", "-98 95 -11 -16 74 19 50", "56 -31 32 -85 10 63 -47", "-93 -19 92 22 16 -48 39", "96 -60 -95 94 45 5 70", "47 36 -79 -14 96 22 85"}) );
  }



  @Test
  public void test57(){
    assertEquals(311, solver.getValue(new String[]{"16 79 12", "-10 86 12", "1 3 9", "61 8 -63", "37 -44 -28", "-94 68 18", "61 6 -97"}) );
  }



  @Test
  public void test58(){
    assertEquals(265, solver.getValue(new String[]{"-33 54 72 -29 82 -72 -13 86"}) );
  }



  @Test
  public void test59(){
    assertEquals(732, solver.getValue(new String[]{"59 -70 35 -81 -7 -66", "-45 -82 77 61 -10 -74", "-93 22 -89 10 65 100", "61 60 66 96 21 20", "-55 -21 97 79 -93 82", "-3 -91 -40 -9 -1 42", "-99 -16 -84 5 70 -91", "13 42 -6 -60 71 -66", "52 -47 65 65 66 89"}) );
  }



  @Test
  public void test60(){
    assertEquals(806, solver.getValue(new String[]{"94 20 58 -47 -79 -32 -76 -36 16 39 45 52", "40 -32 19 -45 -28 -39 -93 57 -57 -99 -71 72", "30 71 80 -79 6 75 -45 22 45 22 -18 -28", "-62 -33 -43 12 35 55 -49 90 9 92 -57 46", "24 9 -27 -26 59 -47 7 -12 -86 -68 -47 -75", "85 52 88 50 24 39 68 35 20 -26 -76 3", "9 -35 -86 -57 39 -46 -25 91 33 -71 -30 -31", "-21 -76 31 -70 -84 57 -74 67 36 -85 -20 71", "54 -27 -86 63 -50 54 93 47 -75 66 26 -50", "-80 -93 9 87 79 -59 -80 -32 55 -41 69 5", "38 -72 -39 -23 -17 47 45 -35 82 -48 13 -34", "22 -89 30 15 -64 82 -52 -7 3 -10 28 -98"}) );
  }



  @Test
  public void test61(){
    assertEquals(1565, solver.getValue(new String[]{"96 -45 79 -33 -17 -43 9 94 25 100 47 0", "80 94 22 21 -15 -15 -60 69 92 -76 -58 -43", "20 59 0 90 -82 -41 61 30 -23 -78 39 29", "4 14 13 46 -77 36 -5 -5 28 100 -18 18", "86 33 -60 70 -2 -92 2 16 -33 60 60 -65", "-66 -96 41 -42 -89 39 19 87 9 -10 65 27", "63 2 -23 -21 87 -41 -14 46 -3 -65 26 -20", "48 11 -38 54 74 -65 -7 -75 82 -42 36 -76", "-80 54 -75 38 29 41 78 -50 -29 81 46 22", "3 67 89 18 -43 28 -24 -27 71 -29 79 95", "-96 -94 86 -95 -68 89 -37 93 87 -43 51 53", "88 -50 62 41 -48 -4 -24 -18 8 0 -93 -41"}) );
  }



  @Test
  public void test62(){
    assertEquals(898, solver.getValue(new String[]{"44 -36 1 -85 82 73 71 -49 72 -74 -69 -84", "13 -79 47 -82 -31 77 65 59 66 75 17 74", "-60 62 24 -32 16 55 63 -59 61 86 83 -62", "-95 -70 -71 -25 -7 -5 -49 58 81 -83 84 -89", "96 26 4 -18 -12 73 -86 -13 -33 90 -48 26", "-20 83 -21 -2 -47 -81 -77 -69 -39 88 -59 -51", "-39 78 -41 5 -77 38 -29 33 -19 46 45 -41", "80 19 -25 10 -66 -56 -40 8 -13 54 -77 -53", "85 -4 -53 24 -56 -8 48 -48 14 -53 -88 -96", "24 -25 40 -20 61 -61 44 -12 33 4 -90 40", "-14 53 -51 79 56 26 -99 88 -58 94 -34 -13", "-49 -100 -78 -35 -15 -17 -19 -78 19 11 -5 -20"}) );
  }



  @Test
  public void test63(){
    assertEquals(1891, solver.getValue(new String[]{"-32 29 -100 -21 -40 9 52 81 -93 22 5 -2", "78 -69 -9 -87 -52 58 30 2 52 99 -8 26", "72 48 28 -50 -47 76 21 -61 72 -69 40 -16", "-79 77 61 10 17 78 93 42 58 -74 -11 59", "54 61 83 -86 -18 -42 65 78 93 83 47 29", "45 44 59 -49 71 -2 62 -3 80 69 -66 -18", "52 -28 41 4 11 -5 -76 -86 24 2 -37 -48", "-80 86 -100 -70 70 76 -29 -52 -7 -41 -81 -44", "-79 89 -34 -34 -87 -99 64 49 90 -36 96 41", "-28 -66 31 -65 -24 -90 -52 -32 69 -89 -49 36", "-100 99 4 -50 -87 90 -81 32 -55 53 13 -6", "67 -9 85 -5 -27 -49 46 -72 37 -65 79 25"}) );
  }



  @Test
  public void test64(){
    assertEquals(1487, solver.getValue(new String[]{"49 18 33 55 46 92 -90 52 96 56 -55 -27", "-2 -2 -28 -94 44 8 -35 -24 18 70 -17 -94", "28 -76 -21 -62 66 72 -18 14 -71 -47 -70 54", "9 -67 -52 25 58 -39 -63 100 80 27 29 59", "-16 -32 -95 87 -89 63 91 43 74 42 36 12", "-79 -35 -32 -14 -29 26 37 60 83 7 42 65", "-49 88 -98 -75 -84 -72 -77 83 26 27 -95 -19", "-6 44 -26 59 -66 4 54 -5 -15 53 28 97", "-76 26 30 -47 -36 12 36 97 3 52 -78 74", "28 -2 -6 -82 -24 -21 -91 -99 14 -83 -64 55", "56 -43 -64 -68 0 -83 -90 -96 -89 -7 98 -60", "86 -23 -74 85 62 53 83 21 25 -82 -17 29"}) );
  }



  @Test
  public void test65(){
    assertEquals(1647, solver.getValue(new String[]{"-81 -81 -38 -38 18 47 55 43 96 61 26 -83", "27 5 -30 100 83 24 -99 53 -41 -59 79 -18", "68 59 53 -69 39 97 14 78 2 92 2 89", "48 -4 -50 25 47 73 73 -61 -76 -91 19 21", "17 13 -25 87 -2 -23 -97 -71 -58 94 -25 34", "-65 26 -12 -30 85 96 100 8 -45 -82 52 -17", "66 -97 -30 3 -8 -21 49 10 25 -96 40 -69", "-97 98 92 -41 0 -13 72 -16 -35 21 16 -31", "84 -33 30 83 97 -61 12 -35 80 18 -90 -83", "-54 97 20 34 -97 83 -45 -85 81 97 5 18", "94 33 -85 70 82 -10 43 48 50 -22 -58 50", "8 55 82 -53 60 30 73 20 52 -79 -32 -2"}) );
  }



  @Test
  public void test66(){
    assertEquals(1462, solver.getValue(new String[]{"13 -31 0 35 34 33 65 58 -24 4 -75 10", "-93 9 29 -71 -99 86 54 55 -28 -10 -88 -7", "14 19 -54 67 -34 65 -9 98 -87 71 -30 66", "-84 -65 0 -40 37 -83 -30 -75 89 40 62 4", "98 -41 -42 33 -76 -2 41 58 -25 62 3 -9", "-54 -70 91 -35 2 -25 23 72 57 84 14 81", "18 72 -89 16 39 18 22 -71 4 -64 47 79", "45 -7 -75 -37 -69 74 79 28 45 -60 9 82", "-77 -86 -98 69 65 0 67 19 23 -52 -20 37", "-18 0 -75 28 -75 62 -65 60 23 80 4 50", "-70 -22 -40 14 -10 33 -54 -62 -6 95 0 -33", "-96 -52 -100 64 92 -57 -15 -88 63 89 97 23"}) );
  }



  @Test
  public void test67(){
    assertEquals(1022, solver.getValue(new String[]{"6 -76 55 -7 -23 4 82 78 -89 -24 59 -79", "91 -87 -79 -19 -65 -5 58 33 61 -37 85 -12", "-1 45 -49 -76 -63 16 -75 -12 -56 42 -61 -37", "94 -35 22 -43 -78 -22 -54 83 -90 86 -52 28", "89 -92 91 65 85 -85 -97 12 -5 67 9 -17", "4 -66 50 7 -26 -93 3 32 2 -40 22 24", "-50 7 52 -64 98 -99 90 83 -1 -67 -9 -85", "24 -86 -8 -24 -79 5 -22 100 31 -53 -91 36", "100 86 19 74 62 69 -89 -46 -88 40 27 -97", "38 -98 1 30 -17 56 23 51 -19 -27 -80 -27", "-46 45 2 51 -29 -98 66 -17 -32 47 6 68", "30 -44 -43 -13 -76 34 53 22 -86 57 93 -95"}) );
  }



  @Test
  public void test68(){
    assertEquals(995, solver.getValue(new String[]{"70 39 -30 94 74 -35 3 -66 -85 -10 23 77", "35 -6 15 96 -4 -99 56 -94 37 -47 -32 53", "-37 -3 68 -34 27 -94 -67 -32 66 26 -52 50", "-54 91 -47 -53 67 -26 -31 30 -24 -46 -66 -47", "-44 34 -54 77 -25 0 66 -8 82 -64 -48 58", "-56 35 -87 -43 -29 19 -80 -79 -10 44 -11 21", "69 -83 -47 -90 -71 2 35 -42 92 89 76 -73", "-32 -61 -90 -31 -82 -50 -37 0 -31 59 54 -29", "-53 25 -23 -84 68 44 91 89 -24 -35 79 -39", "22 -55 58 34 74 -24 -4 73 -5 77 50 53", "56 72 28 100 -99 37 -12 67 22 -73 -75 -17", "-26 -9 -29 -8 72 -14 -51 7 -84 -40 54 82"}) );
  }



  @Test
  public void test69(){
    assertEquals(1326, solver.getValue(new String[]{"54 -75 7 11 -8 76 -18 -93 -65 -4 -100 49", "91 -34 -93 31 -69 -62 -80 65 -61 -10 87 -5", "81 77 -96 26 74 -80 67 -62 23 -37 -43 -73", "-28 -7 -53 -7 -22 69 11 -71 -41 -63 -20 -92", "75 -97 -5 -22 75 -70 -38 6 48 -50 79 -23", "-46 -2 -83 82 97 47 -80 -74 46 52 -88 -6", "97 -79 -35 83 41 4 86 -81 -39 -74 -47 66", "31 10 15 -49 70 7 19 89 -20 -52 -32 41", "57 82 8 62 93 -53 100 -77 -17 -21 74 -86", "-66 -94 78 55 89 -57 93 -2 91 45 22 87", "8 87 -24 74 62 35 -94 25 -20 28 -81 -8", "68 3 70 36 -68 -38 34 -29 2 36 -93 88"}) );
  }



  @Test
  public void test70(){
    assertEquals(1, solver.getValue(new String[]{"1 -1 -1"}) );
  }



  @Test
  public void test71(){
    assertEquals(2, solver.getValue(new String[]{"1 1 -1"}) );
  }



  @Test
  public void test72(){
    assertEquals(1, solver.getValue(new String[]{"-1 -1 1"}) );
  }



  @Test
  public void test73(){
    assertEquals(2, solver.getValue(new String[]{"-1 1 1"}) );
  }



  @Test
  public void test74(){
    assertEquals(3, solver.getValue(new String[]{"-1 1 1 1"}) );
  }



  @Test
  public void test75(){
    assertEquals(2, solver.getValue(new String[]{"-1 -1 1 1"}) );
  }



  @Test
  public void test76(){
    assertEquals(1, solver.getValue(new String[]{"-1 -1 -1 1"}) );
  }



  @Test
  public void test77(){
    assertEquals(3, solver.getValue(new String[]{"1 1 1 -1"}) );
  }



  @Test
  public void test78(){
    assertEquals(2, solver.getValue(new String[]{"1 1 -1 -1"}) );
  }



  @Test
  public void test79(){
    assertEquals(1, solver.getValue(new String[]{"1 -1 -1 -1"}) );
  }



  @Test
  public void test80(){
    assertEquals(2, solver.getValue(new String[]{"1 -1 -1 1", "-1 -1 -1 -1", "-1 -1 -1 1"}) );
  }



  @Test
  public void test81(){
    assertEquals(2, solver.getValue(new String[]{"1 -1 -1 1", "-1 -1 -1 -1", "-1 -1 -1 -1", "-1 -1 -1 1"}) );
  }



  @Test
  public void test82(){
    assertEquals(4, solver.getValue(new String[]{"1 -1 -1 1", "-1 -1 -1 -1", "-1 2 -1 -1", "1 1 -1 1"}) );
  }



  @Test
  public void test83(){
    assertEquals(8, solver.getValue(new String[]{"2 -1 -1 -1 -1 1 1 1 1 2"}) );
  }



  @Test
  public void test84(){
    assertEquals(7, solver.getValue(new String[]{"2 -1 -1 -1 -1 1 1 1 2"}) );
  }



  @Test
  public void test85(){
    assertEquals(8, solver.getValue(new String[]{"2", "-1", "-1", "-1", "-1", "1", "1", "1", "1", "2"}) );
  }



  @Test
  public void test86(){
    assertEquals(7, solver.getValue(new String[]{"2", "-1", "-1", "-1", "-1", "1", "1", "1", "2"}) );
  }



  @Test
  public void test87(){
    assertEquals(4, solver.getValue(new String[]{"1 -1 -1 1", "-1 -1 2 1", "-1 -1 -1 -1", "1 -1 -1 1"}) );
  }



  @Test
  public void test88(){
    assertEquals(0, solver.getValue(new String[]{"0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0"}) );
  }



  @Test
  public void test89(){
    assertEquals(63, solver.getValue(new String[]{"12", "-94", "63", "-50"}) );
  }



  @Test
  public void test90(){
    assertEquals(85, solver.getValue(new String[]{"-54", "75", "10", "-26", "-20", "-35"}) );
  }



  @Test
  public void test91(){
    assertEquals(158, solver.getValue(new String[]{"4", "1", "53", "44", "-70", "-97", "-25", "17", "56", "-54", "-44"}) );
  }



  @Test
  public void test92(){
    assertEquals(110, solver.getValue(new String[]{"60", "-93", "36", "23", "-67", "18", "-63", "-67", "-63", "-42", "27", "-84"}) );
  }



  @Test
  public void test93(){
    assertEquals(38, solver.getValue(new String[]{"-49", "38"}) );
  }



  @Test
  public void test94(){
    assertEquals(95, solver.getValue(new String[]{"5", "54", "15", "21"}) );
  }



  @Test
  public void test95(){
    assertEquals(206, solver.getValue(new String[]{"64", "77", "-61", "-35", "-1", "60", "20", "-14", "-19", "-100", "-71"}) );
  }



  @Test
  public void test96(){
    assertEquals(249, solver.getValue(new String[]{"-86", "-35", "25", "90", "60", "-46", "20", "99"}) );
  }



  @Test
  public void test97(){
    assertEquals(-13, solver.getValue(new String[]{"-13", "-50"}) );
  }



  @Test
  public void test98(){
    assertEquals(190, solver.getValue(new String[]{"-4", "-37", "52", "46", "92"}) );
  }



  @Test
  public void test99(){
    assertEquals(57, solver.getValue(new String[]{"-84 24 -32 57"}) );
  }



  @Test
  public void test100(){
    assertEquals(169, solver.getValue(new String[]{"96 -55 66 -82 -98 61 1 -33"}) );
  }



  @Test
  public void test101(){
    assertEquals(248, solver.getValue(new String[]{"93 -23 -10 77 -60 -46 78 -77 12 -26 -27"}) );
  }



  @Test
  public void test102(){
    assertEquals(286, solver.getValue(new String[]{"-53 80 17 3 91 -7 -74 -92 68 43 5 6"}) );
  }



  @Test
  public void test103(){
    assertEquals(100, solver.getValue(new String[]{"100"}) );
  }



  @Test
  public void test104(){
    assertEquals(102, solver.getValue(new String[]{"34 68 -24 -33 -47 8"}) );
  }



  @Test
  public void test105(){
    assertEquals(101, solver.getValue(new String[]{"-3 54 -24 74 -49 41 -55 21 -43 -3"}) );
  }



  @Test
  public void test106(){
    assertEquals(388, solver.getValue(new String[]{"59 69 -42 -23 87 40 -22 -23 88 45 -25"}) );
  }



  @Test
  public void test107(){
    assertEquals(214, solver.getValue(new String[]{"-33 8 44 55 -20 95 -30 62 0"}) );
  }



  @Test
  public void test108(){
    assertEquals(212, solver.getValue(new String[]{"76 -5 -76 -57 26 26 -93 -6 36 53"}) );
  }



  @Test
  public void test109(){
    assertEquals(14400, solver.getValue(new String[]{"100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100"}) );
  }



  @Test
  public void test110(){
    assertEquals(-100, solver.getValue(new String[]{}) );
  }



  @Test
  public void test111(){
    assertEquals(596, solver.getValue(new String[]{"-37 28 -12 -38 -38 22 27 -1 36 -21 -17 29", "-33 16 18 28 39 1 25 -42 -24 25 -16 -28", "22 38 -34 40 -26 -44 -6 -50 49 -49 -48 42", "-22 42 -33 -20 43 -21 -21 12 47 -39 -46 -35", "44 43 -30 -11 20 14 29 39 -19 -32 15 -45", "-22 -33 -32 21 43 -50 -48 5 12 -43 -33 46", "-16 -9 16 -39 43 -45 7 40 -47 4 -38 -2", "45 2 -35 22 -45 -4 34 -16 -2 -36 4 -42", "5 -29 34 -37 -10 -19 46 -40 -48 5 -2 20", "9 -36 15 -30 15 32 -16 -8 -40 -37 6 -27", "43 -43 41 18 49 47 49 46 8 28 18 17", "35 9 9 -1 46 -1 -3 28 27 -37 0 10"}) );
  }



  @Test
  public void test112(){
    assertEquals(1233, solver.getValue(new String[]{"79 -4 -30 -63 -64 85 -68 91 -40 25 15 23", "7 -70 -72 72 -89 97 31 86 -65 -57 -43 -30", "43 29 8 -76 -56 31 -92 -78 78 -72 -41 -87", "-88 -58 54 -27 17 -81 46 -77 -51 74 96 -90", "20 -24 96 6 19 -98 76 -39 -18 -17 -65 26", "64 -57 -2 -9 -29 8 -46 -16 50 -92 7 -34", "78 -98 -61 -74 76 85 87 -4 -40 82 52 30", "84 27 41 -35 60 77 41 -27 -81 90 65 -59", "-3 -82 25 97 77 82 -88 54 84 -49 30 9", "-64 16 55 -54 -53 6 76 82 83 -33 97 42", "-57 -12 -85 -88 -23 30 -47 74 -2 28 70 -75", "9 82 29 -58 83 -41 2 69 25 -44 -85 73"}) );
  }



  @Test
  public void test113(){
    assertEquals(1317, solver.getValue(new String[]{"-72 -62 -28 -91 17 -76 63 75 -75 59 82 10", "-96 -6 83 54 63 27 90 -38 -54 -69 62 -58", "-67 39 80 98 -29 -61 -76 -74 11 41 -18 22", "74 -6 19 52 -23 -77 24 -48 97 76 -83 68", "-1 3 12 -15 14 96 49 26 94 -61 67 29", "-47 89 -78 -26 38 95 -25 -34 -20 -46 34 -40", "-15 93 -36 40 -97 85 -46 7 7 -22 66 27", "59 27 20 -60 90 -68 67 0 -42 21 -36 58", "-3 96 20 28 0 -79 -73 -1 -28 -81 -6 24", "9 0 87 21 8 1 -42 -32 92 79 39 -9", "-68 -25 -26 26 40 -65 45 3 92 44 -99 6", "-41 46 57 32 -85 21 57 37 14 71 75 -7"}) );
  }



  @Test
  public void test114(){
    assertEquals(1307, solver.getValue(new String[]{"23 -62 43 -80 -100 39 70 44 26 -50 -45 -8", "19 99 -47 -64 82 32 81 -32 -15 -98 42 -81", "78 -28 -17 18 73 -69 -78 98 40 -59 43 -96", "94 -94 -12 91 -63 -91 -40 32 -33 7 -1 81", "51 -8 -27 57 58 23 -87 -31 -10 29 -38 -97", "-30 -41 -82 25 -28 -47 -85 46 -47 28 -58 65", "8 27 25 -97 45 -8 98 87 100 -30 22 76", "-95 8 -23 76 80 -41 68 -81 16 -77 -69 -87", "-66 -60 -69 67 15 26 -97 -4 -21 11 98 56", "53 -10 37 1 -84 75 97 45 74 29 -66 88", "-8 -15 -92 -53 36 59 43 30 -24 -19 -33 19", "71 23 40 87 -79 70 -37 34 -9 -3 -60 0"}) );
  }



  @Test
  public void test115(){
    assertEquals(1536, solver.getValue(new String[]{"-44 -23 -95 71 -69 97 -99 77 -79 44 28 89", "16 36 30 -37 -85 96 -60 -12 29 64 2 59", "-10 59 73 78 -58 -50 -45 50 76 -31 -19 42", "-20 13 36 -72 63 -30 -19 64 18 52 47 -91", "43 -14 -27 -45 90 -59 50 21 -68 15 24 -6", "-95 93 -83 -22 77 -13 -62 34 -63 33 -79 -68", "-6 34 -8 83 76 -7 46 66 -39 39 51 -59", "52 33 68 -90 100 91 57 -34 69 15 80 -100", "94 -16 98 54 -29 29 91 19 42 19 53 -85", "-3 -51 95 -76 -70 43 -15 55 -61 11 55 -71", "31 9 -49 -25 15 85 78 69 -98 -30 -32 -98", "-25 49 -28 62 -31 -18 -60 -41 -41 -16 -15 -89"}) );
  }



  @Test
  public void test116(){
    assertEquals(1372, solver.getValue(new String[]{"52 -66 51 55 -47 -27 -58 34 -55 20 -91 87", "-99 11 -64 57 50 21 55 17 -51 12 48 -11", "-40 64 27 -63 99 -58 32 51 -24 -67 -45 -20", "-44 -3 64 2 67 73 -12 68 -17 -26 -25 84", "45 80 -50 94 -9 48 -68 2 -38 59 -11 -40", "-100 71 61 -23 -97 66 7 -40 -88 -30 12 80", "93 100 -3 -75 -27 72 -92 68 51 -41 62 93", "57 94 -6 -82 53 83 -71 3 53 90 30 7", "56 -64 67 68 6 -22 -3 -2 -73 95 -26 -50", "66 -18 -83 -33 -9 29 -41 -52 23 3 -34 -75", "-65 -5 28 38 -65 -92 -56 41 -56 61 -42 1", "89 56 49 -85 50 -78 -85 15 -45 84 82 46"}) );
  }



  @Test
  public void test117(){
    assertEquals(802, solver.getValue(new String[]{"-75 -31 -42 -40 45 -29 87 -88 -18 20 -39 -40", "-43 -46 -100 -9 74 96 81 24 -97 15 -24 -62", "39 -1 -19 69 26 -96 81 -74 46 61 53 5", "-25 91 20 -20 -78 -34 -55 10 -2 13 -41 1", "77 -89 40 45 -6 63 40 -97 -45 92 -22 80", "88 -13 83 -30 -20 57 -82 67 92 -61 -24 -21", "-66 -55 -43 0 28 67 58 48 -39 2 -19 -32", "-53 58 34 -78 1 14 79 -52 15 -11 58 38", "-72 -92 -46 -21 -77 -44 -37 13 -39 13 86 19", "62 -13 7 60 38 -80 41 -32 58 -38 -33 -68", "-45 -66 -3 23 -25 -83 63 43 81 30 -97 94", "37 93 53 -79 -92 -46 2 -56 61 -43 85 -4"}) );
  }



  @Test
  public void test118(){
    assertEquals(752, solver.getValue(new String[]{"-81 0 47 84 55 -3 -33 29 5 -93 -47 72", "34 -15 43 0 98 -73 -9 -18 -44 67 86 -94", "-77 -59 82 -90 60 -21 61 29 80 -43 -38 -16", "54 30 63 -42 -13 -85 80 -80 -50 -27 -29 -53", "-50 62 -20 6 -21 -35 13 2 -44 -56 12 66", "23 -28 -5 2 -20 7 36 -67 87 -2 -58 -76", "-37 -79 -56 14 -56 -35 11 -5 78 41 -100 -44", "-95 -37 8 -38 7 -81 -73 -70 -59 -28 -18 21", "30 -82 5 16 -34 -3 40 30 -32 35 94 13", "50 -46 -93 -23 96 58 -17 51 -79 91 63 28", "60 41 8 -99 -88 91 -28 -8 59 27 59 75", "-77 -52 -46 -8 33 -53 55 -17 -48 62 10 -53"}) );
  }



  @Test
  public void test119(){
    assertEquals(666, solver.getValue(new String[]{"1 2 3 -4 5 6 7 8 9 10 11 12", "1 2 3 4 5 6 7 8 9 10 11 12", "1 2 3 4 5 6 7 8 9 -10 11 12", "1 2 -3 4 5 6 7 8 9 10 11 12", "1 2 3 4 5 6 7 8 9 10 11 12", "1 2 3 4 5 6 7 -8 9 10 11 12", "1 2 3 4 -5 -6 -7 -8 -9 -10 -11 -12", "1 2 3 4 5 6 7 8 9 10 11 12", "1 2 -3 4 5 6 7 8 9 10 11 12", "1 2 3 4 5 6 7 8 9 10 11 12", "1 2 3 4 5 6 7 8 9 10 11 12", "1 2 3 4 -5 6 -7 -8 -9 -10 11 12"}) );
  }



  @Test
  public void test120(){
    assertEquals(1568, solver.getValue(new String[]{"83 -14 77 15 93 35 86 -8 -51 -79 62 -73", "-10 -41 63 26 40 -74 72 36 -89 68 67 -71", "82 30 -38 23 -33 35 29 -98 -78 -42 -31 67", "93 -44 -89 -58 -71 73 -79 19 84 37 98 24", "15 70 -87 26 -9 80 56 -27 -38 70 96 -19", "5 25 -16 27 36 5 -54 29 13 -43 24 -5", "82 45 -86 67 -66 64 -57 50 -13 -92 -24 78", "88 84 -97 -49 54 99 32 -40 -24 68 39 -88", "-74 86 -6 39 95 70 -66 78 -33 -99 -3 2", "17 -8 -48 56 1 -20 -14 -59 -35 -11 -56 -81", "-60 29 -69 17 -3 71 -19 -25 9 27 67 -44", "-3 53 86 65 6 -17 -81 -76 28 -29 32 -71"}) );
  }



  @Test
  public void test121(){
    assertEquals(372, solver.getValue(new String[]{"26 -15 -17 -23 -39 1 32 0 -24 -26 30 41", "9 -26 -5 -40 -34 33 -43 -4 -9 -25 0 0", "-22 17 -9 7 -37 -25 -33 -1 34 -25 34 -45", "38 -20 -11 -43 1 14 2 -6 -33 -3 -47 -9", "7 47 13 15 -21 29 -45 -6 17 24 -49 -33", "5 30 -16 28 -12 20 -9 9 -21 -2 -39 -38", "-8 4 13 45 -19 13 44 -22 40 -18 15 28", "44 10 -16 -40 45 -23 21 -19 -39 -15 11 19", "22 39 -18 -27 -26 16 -5 46 33 25 47 -28", "41 17 -25 -45 -37 -49 -1 -48 17 -16 -30 -4", "4 23 5 26 31 -33 -5 -8 -32 19 48 -37", "10 -30 7 20 -30 -18 -4 -48 -50 4 24 0"}) );
  }



  @Test
  public void test122(){
    assertEquals(44, solver.getValue(new String[]{"-2 -2 2 -2 -2 2 -2 -2 1 1 -2 1", "-2 2 -2 -2 2 1 2 -2 2 2 2 -2", "-2 -2 1 -2 2 -2 1 -2 2 -2 2 2", "1 2 2 -2 -2 -2 1 -2 1 -2 2 1", "2 2 1 -2 2 1 2 1 2 -2 2 -2", "-2 2 1 2 1 1 2 2 1 -2 2 2", "2 2 -2 -2 2 2 1 2 2 -2 -2 1", "-2 2 -2 -2 1 2 -2 -2 -2 -2 1 1", "-2 -2 1 2 2 -2 -2 -2 -2 2 2 1", "1 1 2 1 1 2 2 -2 -2 -2 -2 -2", "2 -2 1 -2 1 2 -2 -2 1 2 2 -2", "1 -2 2 2 1 2 1 1 1 2 2 -2"}) );
  }



  @Test
  public void test123(){
    assertEquals(-100, solver.getValue(new String[]{"-100"}) );
  }



  @Test
  public void test124(){
    assertEquals(4656, solver.getValue(new String[]{"1 2 3 4 5 6 7 8 9 10 11 12", "13 14 15 16 17 18 19 20 21 22 23 24", "25 26 27 28 29 30 31 32 33 34 35 36", "37 38 39 40 41 42 43 44 45 46 47 48", "49 50 51 52 53 54 55 56 57 58 59 60", "61 62 63 64 65 66 67 68 69 70 71 72", "73 74 75 76 77 78 79 80 81 82 83 84", "85 86 87 88 89 90 91 92 93 94 95 96", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24", "-25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -35 -36", "-37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -48"}) );
  }



  @Test
  public void test125(){
    assertEquals(877, solver.getValue(new String[]{"-82 10 33 -38 -63 -50 -19 -61 35 23 43 -16", "75 -48 -13 36 -11 -38 -88 14 5 -71 44 42", "-23 54 -8 -2 -43 -76 -80 19 99 -14 -10 47", "-56 -100 -44 16 -19 39 -36 52 52 60 -30 -86", "-38 -15 -60 -26 -82 43 -36 -73 78 15 -59 -9", "-70 48 84 37 -1 78 62 -38 27 52 -80 18", "-1 -82 15 98 -14 -100 3 -33 -56 -51 71 -47", "-30 -36 -27 -59 -65 -71 -75 -96 -91 39 -55 95", "97 27 43 -65 30 32 55 78 25 89 -46 -85", "-10 -30 9 -78 -17 -78 -16 93 60 -82 -6 -67", "39 -90 51 88 -9 -28 -99 64 -26 -71 48 -14", "39 11 20 61 34 27 36 -21 -64 44 -67 -92"}) );
  }



  @Test
  public void test126(){
    assertEquals(-1, solver.getValue(new String[]{"-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-3 -5 -7 -9 -11 -13 -15 -17 -19 -21 -23 -25", "-12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1", "-18 -17 -15 -14 -12 -11 -9 -8 -6 -5 -3 -2", "-10 -20 -50 -40 -30 -60 -90 -80 -70 -75 -15 -36", "-11 -12 -22 -21 -20 -18 -17 -13 -14 -19 -15 -16", "-100 -99 -98 -97 -96 -95 -94 -93 -92 -91 -90 -89", "-1 -4 -9 -16 -25 -36 -49 -64 -81 -100 -2 -3", "-95 -12 -54 -74 -47 -64 -15 -16 -73 -42 -11 -59", "-1 -2 -3 -2 -1 -2 -3 -2 -1 -2 -3 -2", "-91 -90 -91 -90 -5 -6 -7 -8 -9 -10 -11 -12"}) );
  }



  @Test
  public void test127(){
    assertEquals(-2, solver.getValue(new String[]{"-84 -87 -78 -16 -94 -36 -87 -93 -50 -22 -63 -28", "-91 -60 -64 -27 -41 -27 -73 -37 -12 -69 -68 -30", "-83 -31 -63 -24 -68 -36 -30 -3 -23 -59 -70 -68", "-94 -57 -12 -43 -30 -74 -22 -20 -85 -38 -99 -25", "-16 -71 -14 -27 -92 -81 -57 -74 -63 -71 -97 -82", "-6 -26 -85 -28 -37 -6 -47 -30 -14 -58 -25 -96", "-83 -46 -15 -68 -35 -65 -44 -51 -88 -9 -77 -79", "-89 -85 -4 -52 -55 -100 -33 -61 -77 -69 -40 -13", "-27 -87 -95 -40 -96 -71 -35 -79 -68 -2 -98 -3", "-18 -93 -53 -57 -2 -81 -87 -42 -66 -90 -45 -20", "-41 -30 -32 -18 -98 -72 -82 -76 -10 -28 -68 -57", "-98 -54 -87 -66 -7 -84 -20 -25 -29 -72 -33 -30"}) );
  }



  @Test
  public void test128(){
    assertEquals(-50, solver.getValue(new String[]{"-50"}) );
  }



  @Test
  public void test129(){
    assertEquals(-1, solver.getValue(new String[]{"-1"}) );
  }



  @Test
  public void test130(){
    assertEquals(1059, solver.getValue(new String[]{"7 -89 -35 -1 56 88 82 -71 55 -64 28 -35", "97 -32 9 -7 37 -1 -42 -24 81 -22 92 -38", "33 49 67 6 15 30 -67 14 0 9 -95 27", "70 51 81 -87 41 19 -6 57 -45 -84 67 -37", "3 -67 64 79 59 40 -18 -97 -77 19 -71 20", "93 77 52 79 -100 31 73 -15 -26 -19 16 29", "-88 -13 -81 -78 61 54 89 -6 71 72 58 -84", "-55 59 -79 -23 -80 13 -42 69 89 -59 77 26", "8 97 -93 -32 67 34 16 87 -87 0 24 -51", "-78 -70 -76 -63 -81 95 9 92 -59 -49 4 18", "-17 -40 5 -96 -12 -46 96 73 -69 6 -51 -84", "-79 85 -23 25 -27 -55 -78 -7 37 45 7 65"}) );
  }



  @Test
  public void test131(){
    assertEquals(1417, solver.getValue(new String[]{"57 22 -85 54 21 -19 44 71 -68 27 50 54", "34 -98 -42 24 -54 32 85 -98 29 27 45 77", "66 27 -84 -65 96 92 -51 -2 -60 3 96 92", "29 91 6 13 15 -12 38 -69 -80 52 -10 46", "-94 -28 96 -97 9 -79 69 100 77 14 8 29", "7 77 71 -38 -24 -44 -23 76 -74 -32 -19 -67", "-27 -100 10 85 -42 4 47 80 89 -84 -11 -80", "14 -99 59 27 13 8 31 4 -68 41 86 71", "6 49 7 -97 -30 37 9 -83 -39 60 -79 21", "-5 -21 49 17 -43 -44 32 -52 -58 -19 -59 -2", "80 84 57 36 -6 -13 -20 98 -28 98 72 -71", "-65 6 -21 90 -26 -8 -21 -58 37 -13 -36 15"}) );
  }



  @Test
  public void test132(){
    assertEquals(144, solver.getValue(new String[]{"1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1"}) );
  }



  @Test
  public void test133(){
    assertEquals(3189, solver.getValue(new String[]{"71 -60 42 -57 -47 34 -52 -60 -96 49 29 55", "14 -69 90 51 -9 60 78 87 -92 -94 70 74", "-80 71 64 -78 82 49 0 99 76 94 -7 44", "32 76 -24 66 38 -44 29 47 0 48 -28 42", "37 23 47 76 -72 14 -67 65 83 39 97 89", "14 -29 -49 -11 73 62 35 65 55 68 25 59", "-73 86 50 -64 42 72 30 8 50 -54 -8 23", "30 -17 21 -96 -73 96 87 18 -18 -86 -5 83", "30 73 89 34 -19 6 -26 0 14 54 89 -61", "-95 -21 73 -87 -6 74 88 13 24 -12 87 -81", "42 100 -73 -2 39 -32 27 46 44 28 93 3", "-93 32 95 78 13 99 2 -18 91 51 69 17"}) );
  }



  @Test
  public void test134(){
    assertEquals(-99, solver.getValue(new String[]{"-100", "-99"}) );
  }



  @Test
  public void test135(){
    assertEquals(1360, solver.getValue(new String[]{"-59 -33 34 0 69 24 -22 58 62 -36 5 45", "-19 -73 61 -9 95 42 -73 -64 91 -96 2 53", "-8 82 -79 16 18 -5 -53 26 71 38 -31 12", "-33 -1 -65 -6 3 -89 22 33 -27 -36 41 11", "-47 -32 47 -56 -38 57 -63 -41 23 41 29 78", "16 -65 90 -58 -12 6 -60 42 -36 -52 -54 -95", "-10 29 70 50 -94 1 93 48 -71 -77 -16 54", "56 -60 66 76 31 8 44 -61 -74 23 37 38", "18 -18 29 41 -67 15 -61 -42 4 30 77 6", "-27 86 -79 45 24 -28 -30 -71 77 73 -3 12", "86 -10 61 -64 55 67 -45 74 -69 -48 50 50", "41 24 66 -70 7 91 -93 37 -43 -13 53 83"}) );
  }



  @Test
  public void test136(){
    assertEquals(14400, solver.getValue(new String[]{"100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100"}) );
  }



  @Test
  public void test137(){
    assertEquals(2116, solver.getValue(new String[]{"12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 -16 17 18", "12 14 15 16 17 18 12 -14 15 -16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18", "12 14 15 16 17 18 12 14 15 16 17 18"}) );
  }



  @Test
  public void test138(){
    assertEquals(-9, solver.getValue(new String[]{"-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9", "-100 -100 -100 -100 -100 -100 -100 -9 -9 -9 -9 -9"}) );
  }



  @Test
  public void test139(){
    assertEquals(-99, solver.getValue(new String[]{"-99"}) );
  }



  @Test
  public void test140(){
    assertEquals(946, solver.getValue(new String[]{"-67 0 -24 58 64 -45 -27 -91 -42 -36 -4 53", "82 -16 95 -26 -38 -12 -99 -94 -11 33 -64 -11", "-68 -44 57 -59 -41 -78 35 42 6 42 48 5", "29 50 1 -48 -23 54 40 76 -8 39 23 -38", "82 -41 -15 -58 30 -6 -86 -45 72 29 -73 -12", "90 -36 -67 -74 -52 50 -24 30 -91 -37 -87 -83", "-9 -58 -88 46 30 -68 91 55 59 37 83 -41", "50 -36 20 21 99 84 -34 -99 38 88 -67 93", "83 -21 17 -14 -16 -51 49 -56 3 8 9 -2", "-85 -43 -87 3 0 18 96 81 -98 -57 22 92", "79 57 91 -88 11 34 55 46 86 -33 -42 16", "-98 51 -99 -76 89 -12 10 -69 -88 -89 -23 85"}) );
  }



  @Test
  public void test141(){
    assertEquals(3250, solver.getValue(new String[]{"43 -14 73 -12 48 -36 -45 0 51 68 -14 8", "-24 -4 22 22 70 67 87 -22 -36 -20 97 -8", "-32 74 -42 60 95 74 -49 4 34 71 -8 34", "-50 -50 86 17 80 44 -26 93 11 -24 -16 -34", "6 -21 22 -22 6 7 82 54 -12 12 -42 -38", "61 11 47 -9 26 14 -17 28 -17 98 40 85", "25 78 88 -28 -1 -24 92 65 -27 -14 14 -11", "72 79 36 49 68 49 58 60 74 2 -21 19", "27 -10 11 -41 54 -35 -24 74 8 -14 6 45", "-13 45 85 84 99 41 94 -47 82 19 73 -18", "76 1 77 20 -31 -16 -29 69 -11 28 26 14", "95 95 -40 -26 -50 43 -5 -2 46 12 61 62"}) );
  }



  @Test
  public void test142(){
    assertEquals(-28, solver.getValue(new String[]{"-28"}) );
  }



  @Test
  public void test143(){
    assertEquals(1058, solver.getValue(new String[]{"12 23 65 73 83 58 92 -77 18 49 -44 89", "66 -12 7 -90 -92 39 -98 96 -100 -46 -57 -84", "-43 85 -91 -30 -45 86 -8 -45 -58 -41 69 4", "-64 63 35 -33 13 96 -6 -94 68 5 40 -47", "-79 -85 94 76 -4 -91 87 13 -91 42 -41 18", "46 -64 -41 24 56 69 -54 -31 21 -39 77 -48", "-79 -35 -71 -41 -16 -72 -79 92 -91 65 -37 66", "84 -95 25 -27 -17 40 -5 -13 -33 -25 -33 -58", "70 -98 -91 28 68 64 80 23 49 -88 -75 4", "-17 2 58 -6 -93 -73 78 29 -81 -94 81 31", "-36 35 21 -92 -58 -38 -61 38 -49 15 -36 59", "90 9 78 -17 -6 90 18 -60 -18 -87 -35 69"}) );
  }



  @Test
  public void test144(){
    assertEquals(726, solver.getValue(new String[]{"1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100", "1 2 3 4 5 6 7 8 9 10 11 -100"}) );
  }



  @Test
  public void test145(){
    assertEquals(12089, solver.getValue(new String[]{"-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 -1 100 100 100 100 100 100 100 100 100 100", "-1 100 100 100 100 100 100 100 100 100 100 100"}) );
  }



  @Test
  public void test146(){
    assertEquals(0, solver.getValue(new String[]{"0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0"}) );
  }



  @Test
  public void test147(){
    assertEquals(8, solver.getValue(new String[]{"-38 8"}) );
  }



  @Test
  public void test148(){
    assertEquals(1082, solver.getValue(new String[]{"2 -45 93 1 0 -36 -65 23 76 3 -23 0", "-43 -35 43 28 95 3 -23 -35 4 5 -34 76", "23 76 -34 -64 34 -26 -74 1 0 -26 73 43", "66 -5 2 65 -36 -72 -90 88 -22 -6 3 -58", "-39 99 -37 46 46 46 -98 -2 -16 -76 2 8", "-2 2 -54 -65 99 -23 5 26 67 -45 25 -7", "34 56 23 43 -23 -56 -72 -45 23 -54 0 0", "-53 -43 -61 -36 12 87 34 92 -23 85 -2 -4", "47 -38 3 96 34 29 -12 -15 29 40 50 3", "16 -45 18 30 -20 47 74 93 32 -23 29 53", "23 -23 45 -42 36 -37 -22 -22 -34 45 32 32", "-52 -54 -54 34 -65 -23 67 87 -36 -57 4 3"}) );
  }



  @Test
  public void test149(){
    assertEquals(1503, solver.getValue(new String[]{"-99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99", "-99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99", "-99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99", "-99 -99 100 -99 -99 -99 -99 100 -99 -99 100 -99", "-99 -99 100 -99 -99 -99 -99 100 -99 -99 100 -99", "-99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99", "-99 -99 100 -99 -99 -99 -99 100 -99 -99 100 -99", "-99 -99 100 -99 -99 -99 -99 100 -99 -99 100 -99", "-99 -99 100 -99 -99 -99 -99 100 -99 -99 100 -99", "-99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99", "-99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99 -99", "-99 -99 100 -99 -99 -99 -99 100 -99 -99 100 -99"}) );
  }



  @Test
  public void test150(){
    assertEquals(91, solver.getValue(new String[]{"-38 -22 -52", "91 -76 58"}) );
  }



  @Test
  public void test151(){
    assertEquals(2, solver.getValue(new String[]{"-1 1 1 1 -1"}) );
  }



  @Test
  public void test152(){
    assertEquals(3, solver.getValue(new String[]{"1 1 -1 -1 1"}) );
  }



  @Test
  public void test153(){
    assertEquals(-1, solver.getValue(new String[]{"-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12", "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12"}) );
  }



  @Test
  public void test154(){
    assertEquals(1021, solver.getValue(new String[]{"-62 69 -63 72 -77 -25 -31 7 42 -6 -23 -80", "81 -85 -76 30 37 -18 -100 -2 31 97 34 -15", "70 -56 71 97 78 -82 -72 24 15 27 58 -37", "67 -66 77 29 -20 32 -70 -69 -95 3 -16 -97", "-54 -79 92 46 -18 -49 -86 23 15 -91 -79 -99", "84 37 -47 -48 -46 50 -73 -68 -93 -33 -51 -44", "-62 -46 -33 -78 -98 85 75 91 -66 83 77 -73", "-59 -20 37 -23 85 -47 -88 97 28 95 47 91", "2 -14 -63 -21 29 12 -8 25 41 -50 -90 3", "65 10 34 -81 13 54 65 96 -47 -79 -40 71", "-90 -88 8 51 59 27 69 -80 15 84 -96 51", "-96 -15 20 -33 88 -34 55 -88 23 -73 69 57"}) );
  }



  @Test
  public void test155(){
    assertEquals(319, solver.getValue(new String[]{"0 -4 -2 -1 4 5 8 -3 -4 -5 0 0", "9 3 7 5 0 1 9 5 0 -1 9 -1", "-9 2 4 7 8 -9 3 2 0 9 6 8", "5 9 0 1 8 2 9 0 8 5 4 3", "0 -9 -2 1 -8 0 9 -8 -3 2 4 8", "0 0 1 -2 8 4 5 6 1 0 6 0", "-8 2 8 3 0 1 9 8 0 7 -1 -3", "-1 0 3 2 8 7 5 7 8 1 0 9", "7 -5 7 1 0 -7 8 0 4 -1 5 0", "-7 0 -1 -3 -7 2 8 0 7 4 8 0", "-8 7 1 0 3 9 2 3 6 -8 9 -2", "0 1 0 9 -1 -9 3 2 7 5 7 2"}) );
  }



  @Test
  public void test156(){
    assertEquals(757, solver.getValue(new String[]{"-9 -29 -98 19 -61 52 89 -13 50 -33 -32 -1", "4 -40 28 47 33 97 -51 -26 -6 27 -92 -81", "-27 -8 -10 97 43 -53 73 -65 25 -25 -68 -45", "70 -99 57 -82 61 -88 95 -55 -4 33 80 -43", "-53 -56 -24 24 -52 11 96 -100 -70 -54 55 72", "-30 3 -40 61 27 -62 -67 61 62 61 -86 -7", "-93 26 35 93 -71 -25 -80 -80 84 -91 -73 32", "-16 46 62 -62 2 -19 -22 46 -21 -87 84 21", "-46 -60 -93 18 93 31 11 -19 -62 -25 80 52", "-65 -53 -54 29 77 94 -19 41 31 -61 37 11", "-18 92 -51 39 -91 -95 0 71 -32 17 19 -46", "99 45 -22 -8 36 30 16 -66 -100 -93 -79 15"}) );
  }



  @Test
  public void test157(){
    assertEquals(-5, solver.getValue(new String[]{"-5"}) );
  }



  @Test
  public void test158(){
    assertEquals(800, solver.getValue(new String[]{"-24 51 -66 -11 86 81 23 -36 -49 -82 -5", "91 -11 -30 -85 61 -43 79 -4 -52 56 38", "-34 47 -28 23 -31 -11 -79 61 93 23 35", "95 -42 -30 30 27 39 97 -5 49 -84 -77", "-52 77 -61 30 3 -36 22 41 32 18 -92", "-88 -36 -31 -47 33 -99 93 11 57 -98 -58", "57 -74 -17 61 -8 -7 36 -66 -48 32 59", "-57 -98 -35 -57 -18 41 4 85 20 -64 39", "16 -85 54 -13 91 -86 35 -88 63 56 48", "16 -75 28 61 -41 -73 43 44 95 76 -27", "-3 -5 70 -71 22 -53 73 -87 1 61 4", "3 61 33 28 50 -76 -46 -17 14 6 -35"}) );
  }



  @Test
  public void test159(){
    assertEquals(1184, solver.getValue(new String[]{"32 51 1 69 -15 -58 73 87 11 -27 64", "54 -11 84 18 93 31 15 -26 -99 16 20", "11 -38 96 65 -53 30 -8 23 -18 26 38", "74 16 -49 -62 -19 23 35 -84 71 -51 98", "42 28 -23 8 89 83 50 7 30 10 55", "-95 42 -97 -58 -23 -37 -78 -59 -8 13 1", "35 -9 -89 -92 -50 56 66 67 18 20 50", "21 -78 -49 -52 -29 -2 27 49 -84 65 41", "13 47 12 46 86 -13 -33 -35 -63 9 -34", "-19 -85 52 -23 53 -53 32 9 80 -59 -22", "-53 0 40 -18 74 -82 -54 -41 58 -80 24", "94 -25 -81 -97 10 37 57 0 -55 -35 41"}) );
  }



  @Test
  public void test160(){
    assertEquals(191, solver.getValue(new String[]{"1 2 3 4 5 4 5 2 1", "5 4 3 2 1 5 4 3 2", "2 8 8 2 1 9 9 1 5", "1 1 1 1 1 1 1 1 1", "9 9 9 9 9 9 9 9 9"}) );
  }



  @Test
  public void test161(){
    assertEquals(7353, solver.getValue(new String[]{"12 23 34 45 56 67 78 89 90 11 66 71", "12 23 34 45 56 67 78 89 90 11 66 71", "12 23 34 45 56 7 78 89 90 11 66 71", "12 23 4 45 56 67 78 89 90 11 66 71", "12 23 34 45 56 67 78 89 90 11 66 7", "1 23 34 45 56 67 78 89 90 11 66 71", "12 23 34 5 56 67 78 89 90 11 66 71", "12 23 34 45 56 67 78 89 90 1 66 71", "12 92 34 45 56 67 78 89 90 11 66 71", "12 23 34 45 56 67 78 89 90 11 66 1", "12 23 34 45 56 67 65 89 90 11 66 71", "12 23 34 45 96 67 75 9 9 13 66 71"}) );
  }



  @Test
  public void test162(){
    assertEquals(1089, solver.getValue(new String[]{"-1 -3 16 29 -34 45 -1 -97 -9 18 -56 -85", "-77 92 73 88 -61 57 -3 -57 45 -81 -35 59", "-6 43 39 38 84 23 -59 -21 -26 -94 -11 -68", "36 68 -37 48 -38 68 -75 36 -56 46 30 62", "-97 75 47 48 -60 -74 -93 -88 -84 86 51 -99", "-89 25 48 40 -7 39 59 -56 72 -42 93 -73", "33 -1 -77 84 -88 -6 -89 -29 61 -11 41 1", "45 -21 -34 12 -64 -78 -93 -15 -24 90 8 -30", "0 -78 87 -17 30 48 -15 12 -63 3 97 55", "3 -35 47 -86 64 25 91 67 51 14 10 42", "-72 96 -68 -65 -31 25 -7 4 -10 68 79 -18", "-9 -20 -29 -42 29 37 66 82 5 87 -73 -91"}) );
  }



  @Test
  public void test163(){
    assertEquals(975, solver.getValue(new String[]{"-59 76 3 69 -26 -54 -79 -88 -72 43 -23 -95", "66 44 12 -11 81 -17 -97 -91 -70 32 -17 53", "-9 21 35 -77 -80 97 -80 -82 -2 -19 -40 -87", "40 69 51 -55 61 -7 67 83 86 -59 -34 -27", "13 -66 -80 7 0 95 38 96 -20 -7 93 75", "-45 -80 -20 -67 -13 57 96 -2 69 36 10 -13", "-89 -4 -51 -26 32 47 -28 31 32 61 65 -45", "-37 82 42 40 -38 78 -40 -22 4 -33 10 -69", "-62 -28 -85 -41 -91 61 -84 11 92 -19 8 -5", "16 -25 97 -98 91 78 -61 -100 -56 -4 -28 -70", "-33 -76 16 44 -56 -56 38 -3 -89 93 -86 45", "-33 -76 16 44 -56 -56 38 -3 -89 93 -86 45"}) );
  }



  @Test
  public void test164(){
    assertEquals(2, solver.getValue(new String[]{"-10 1 1 1 -10"}) );
  }



  @Test
  public void test165(){
    assertEquals(200, solver.getValue(new String[]{"-100", "100", "100"}) );
  }



  @Test
  public void test166(){
    assertEquals(200, solver.getValue(new String[]{"-100 -100 -100 100 100 100 -100 -100 -100"}) );
  }



}

